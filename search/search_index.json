{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"wings A simple cross language struct and enum file generator. (You might want to use a linter with this to clean up some trailing whitespaces and uneven tabbings.) Requirements Nim Nimble - Bundled with Nim Please (alternative to nimble) * Note: Replace plz with ./pleasew if you do not have please installed. Supported languages go Kotlin (WIP) Nim (WIP) Python TypeScript Utility package Supported types wings Go Kotlin Nim Python TypeScript int int Int int int number str string String string str string bool bool Boolean bool bool boolean date time.Time Date - date Date []type []type ArrayList<type> seq[type] list [] Info Unsupported types are initialized as custom struct / classes unless specified otherwise. Nim date It is currently unsupported since I haven't figure out how to parse ISOString time properly from string in Nim. Run plz run //src:wings -- \"{filepath}\" to generate the files. Issue with nimble I also have a task made for nimble ( nimble genFile \"{filepath}\" ) but its currently broken for the latest version (see official issue here ). If you have an older version of nimble, it should work as intended. Struct Input file: go-filepath classroom kt-filepath another nim-filepath folder py-filepath python ts-filepath some/files go-import time go-import homework:path/to/homework kt-import java.util.ArrayList nim-import times py-import datetime:date ts-import { IWingsStruct }:wings-ts-util ts-import Homework:path/to/Homework py-implement People ts-implement People Student { id int -1 name str cur_class str is_active bool true year date homeworks []Homework } tsFunc( public addHomework(hw: Homework): void { this.Homeworks.push(hw); } ) Output files: classroom/student.go /* * This is a generated file * * If you would like to make any changes, please edit the source file instead. * run `nimble genFile \"{SOURCE_FILE}\"` upon completion. * * Source: student.struct */ package classroom import ( \"time\" homework \"path/to/homework\" ) type Student struct { Id int `json:\"id\"` Name string `json:\"name\"` CurClass string `json:\"cur_class\"` IsActive bool `json:\"is_active\"` Year time . Time `json:\"year\"` Homeworks [] homework . Homework `json:\"homeworks\"` } type Students [] Student another/Student.kt /* * This is a generated file * * If you would like to make any changes, please edit the source file instead. * run `nimble genFile \"{SOURCE_FILE}\"` upon completion. * * Source: student.struct */ package another import java.util.ArrayList class Student { var id : Int = - 1 var name : String = \"\" var curClass : String = \"\" var isActive : Boolean = true var year : Date = Date () var homeworks : ArrayList < Homework > = ArrayList < Homework >() fun toJsonKey ( key : string ): string { when ( key ) { \"id\" -> return \"id\" \"name\" -> return \"name\" \"curClass\" -> return \"cur_class\" \"isActive\" -> return \"is_active\" \"year\" -> return \"year\" \"homeworks\" -> return \"homeworks\" else -> return key } } } folder/student.nim # This is a generated file # # If you would like to make any changes, please edit the source file instead. # run `nimble genFile \"{SOURCE_FILE}\"` upon completion. # # Source: student.struct import json import times type Student * = object id * : int name * : string curClass * : string isActive * : bool year * : DateTime homeworks * : seq [ Homework ] proc parse * ( student : var Student , data : string ): void = let jsonOutput = parseJson ( data ) student . id = jsonOutput [ \"id\" ] . getInt () student . name = jsonOutput [ \"name\" ] . getStr () student . curClass = jsonOutput [ \"cur_class\" ] . getStr () student . isActive = jsonOutput [ \"is_active\" ] . getBool () student . year = now () # as you can see, this isn't working student . homeworks = jsonOutput [ \"homeworks\" ] . getElems () python/student.py # This is a generated file # # If you would like to make any changes, please edit the source file instead. # run `nimble genFile \"{SOURCE_FILE}\"` upon completion. # # Source: student.struct import json from datetime import date class Student ( People ): id : int = - 1 name : str = \"\" cur_class : str = \"\" is_active : bool = True year : date = date . today () homeworks : list = list () def init ( self , data ): self = json . loads ( data ) some/files/Student.ts /* * This is a generated file * * If you would like to make any changes, please edit the source file instead. * run `nimble genFile \"{SOURCE_FILE}\"` upon completion. * * Source: student.struct */ import { IWingsStruct } from 'wings-ts-util' ; import Homework from 'path/to/Homework' ; export default class Student implements People { [ key : string ] : any ; public id : number = - 1 ; public name : string = '' ; public curClass : string = '' ; public isActive : boolean = true ; public year : Date = new Date (); public homeworks : [] = []; public init ( data : any ) : boolean { try { this . id = data . id ; this . name = data . name ; this . curClass = data . cur_class ; this . isActive = data . is_active ; this . year = new Date ( data . year ); if ( data . homeworks !== \"null\" ) { this . homeworks = data . homeworks ; } } catch ( e ) { return false ; } return true ; } public toJsonKey ( key : string ) : string { switch ( key ) { case 'id' : { return 'id' ; } case 'name' : { return 'name' ; } case 'curClass' : { return 'cur_class' ; } case 'isActive' : { return 'is_active' ; } case 'year' : { return 'year' ; } case 'homeworks' : { return 'homeworks' ; } default : { return key ; } } } public addHomework ( hw : Homework ) : void { this . Homeworks . push ( hw ); } } The format of the fields goes from left to right in such order \"field name\", \"field type\", \"field JSON name\", and \"initialize as\" (optional, not used in Go and Nim). *Note: There is no gurranttee that \"initialize as\" field goes through a proper conversion or localization based on the targetted output languages so ideally you want to make sure it works with all versions of output that will be using it. Enum Input file: go-filepath path kt-filepath to nim-filepath some py-filepath python ts-filepath file/person Emotion { Accomplished Angry Annoyed Appalled Excited Exhausted FeelsGood Frustrated Happy Meh Sad Satisfied } path/emotion.go /* * This is a generated file * * If you would like to make any changes, please edit the source file instead. * run `nimble genFile \"{SOURCE_FILE}\"` upon completion. * * Source: emotion.enum */ package path type Emotion int const ( Accomplished = iota Angry Annoyed Appalled Excited Exhausted FeelsGood Frustrated Happy Meh Sad Satisfied ) to/Emotion.kt /* * This is a generated file * * If you would like to make any changes, please edit the source file instead. * run `nimble genFile \"{SOURCE_FILE}\"` upon completion. * * Source: emotion.enum */ package to enum class Emotion { Accomplished , Angry , Annoyed , Appalled , Excited , Exhausted , FeelsGood , Frustrated , Happy , Meh , Sad , Satisfied , } some/emotion.nim # This is a generated file # # If you would like to make any changes, please edit the source file instead. # run `nimble genFile \"{SOURCE_FILE}\"` upon completion. # # Source: emotion.enum type Emotion * = enum Accomplished , Angry , Annoyed , Appalled , Excited , Exhausted , FeelsGood , Frustrated , Happy , Meh , Sad , Satisfied , python/emotion.py # This is a generated file # # If you would like to make any changes, please edit the source file instead. # run `nimble genFile \"{SOURCE_FILE}\"` upon completion. # # Source: emotion.enum from enum import Enum , auto class Emotion ( Enum ): Accomplished = auto () Angry = auto () Annoyed = auto () Appalled = auto () Excited = auto () Exhausted = auto () FeelsGood = auto () Frustrated = auto () Happy = auto () Meh = auto () Sad = auto () Satisfied = auto () file/person/Emotion.ts /* * This is a generated file * * If you would like to make any changes, please edit the source file instead. * run `nimble genFile \"{SOURCE_FILE}\"` upon completion. * * Source: emotion.enum */ enum Emotion { Accomplished , Angry , Annoyed , Appalled , Excited , Exhausted , FeelsGood , Frustrated , Happy , Meh , Sad , Satisfied , } export default Emotion ; filepath Basically the path location of where the generated file lives relative to where the build is ran (which if you use Please or Nimble as suggested, it will always be at the top level folder of this project - wings/ ). If the namespace for a specific language is not defined, the file for that language will not be generated. import Usually the include or import statement required for some part of the file to work properly. (In this case, its mostly external classes or enums for custom typing.) implement In many occassion, your struct or object might be implementing a separate interface class. Use this to specify the class that it is implementing. (There is not support for this in go since it would already inherently associate your struct to the interface if you implemented all the functions and variables defined in the interface.) {lang}Func Specific functions for specific programming languages. Ideally, you should have a separate utility classes that do all the other operations. This is mostly designed to be used for defining functions in an interface that the struct / class is implementing.","title":"Home"},{"location":"#wings","text":"A simple cross language struct and enum file generator. (You might want to use a linter with this to clean up some trailing whitespaces and uneven tabbings.)","title":"wings"},{"location":"#requirements","text":"Nim Nimble - Bundled with Nim Please (alternative to nimble) * Note: Replace plz with ./pleasew if you do not have please installed.","title":"Requirements"},{"location":"#supported-languages","text":"go Kotlin (WIP) Nim (WIP) Python TypeScript Utility package","title":"Supported languages"},{"location":"#supported-types","text":"wings Go Kotlin Nim Python TypeScript int int Int int int number str string String string str string bool bool Boolean bool bool boolean date time.Time Date - date Date []type []type ArrayList<type> seq[type] list [] Info Unsupported types are initialized as custom struct / classes unless specified otherwise. Nim date It is currently unsupported since I haven't figure out how to parse ISOString time properly from string in Nim. Run plz run //src:wings -- \"{filepath}\" to generate the files. Issue with nimble I also have a task made for nimble ( nimble genFile \"{filepath}\" ) but its currently broken for the latest version (see official issue here ). If you have an older version of nimble, it should work as intended.","title":"Supported types"},{"location":"#struct","text":"Input file: go-filepath classroom kt-filepath another nim-filepath folder py-filepath python ts-filepath some/files go-import time go-import homework:path/to/homework kt-import java.util.ArrayList nim-import times py-import datetime:date ts-import { IWingsStruct }:wings-ts-util ts-import Homework:path/to/Homework py-implement People ts-implement People Student { id int -1 name str cur_class str is_active bool true year date homeworks []Homework } tsFunc( public addHomework(hw: Homework): void { this.Homeworks.push(hw); } ) Output files: classroom/student.go /* * This is a generated file * * If you would like to make any changes, please edit the source file instead. * run `nimble genFile \"{SOURCE_FILE}\"` upon completion. * * Source: student.struct */ package classroom import ( \"time\" homework \"path/to/homework\" ) type Student struct { Id int `json:\"id\"` Name string `json:\"name\"` CurClass string `json:\"cur_class\"` IsActive bool `json:\"is_active\"` Year time . Time `json:\"year\"` Homeworks [] homework . Homework `json:\"homeworks\"` } type Students [] Student another/Student.kt /* * This is a generated file * * If you would like to make any changes, please edit the source file instead. * run `nimble genFile \"{SOURCE_FILE}\"` upon completion. * * Source: student.struct */ package another import java.util.ArrayList class Student { var id : Int = - 1 var name : String = \"\" var curClass : String = \"\" var isActive : Boolean = true var year : Date = Date () var homeworks : ArrayList < Homework > = ArrayList < Homework >() fun toJsonKey ( key : string ): string { when ( key ) { \"id\" -> return \"id\" \"name\" -> return \"name\" \"curClass\" -> return \"cur_class\" \"isActive\" -> return \"is_active\" \"year\" -> return \"year\" \"homeworks\" -> return \"homeworks\" else -> return key } } } folder/student.nim # This is a generated file # # If you would like to make any changes, please edit the source file instead. # run `nimble genFile \"{SOURCE_FILE}\"` upon completion. # # Source: student.struct import json import times type Student * = object id * : int name * : string curClass * : string isActive * : bool year * : DateTime homeworks * : seq [ Homework ] proc parse * ( student : var Student , data : string ): void = let jsonOutput = parseJson ( data ) student . id = jsonOutput [ \"id\" ] . getInt () student . name = jsonOutput [ \"name\" ] . getStr () student . curClass = jsonOutput [ \"cur_class\" ] . getStr () student . isActive = jsonOutput [ \"is_active\" ] . getBool () student . year = now () # as you can see, this isn't working student . homeworks = jsonOutput [ \"homeworks\" ] . getElems () python/student.py # This is a generated file # # If you would like to make any changes, please edit the source file instead. # run `nimble genFile \"{SOURCE_FILE}\"` upon completion. # # Source: student.struct import json from datetime import date class Student ( People ): id : int = - 1 name : str = \"\" cur_class : str = \"\" is_active : bool = True year : date = date . today () homeworks : list = list () def init ( self , data ): self = json . loads ( data ) some/files/Student.ts /* * This is a generated file * * If you would like to make any changes, please edit the source file instead. * run `nimble genFile \"{SOURCE_FILE}\"` upon completion. * * Source: student.struct */ import { IWingsStruct } from 'wings-ts-util' ; import Homework from 'path/to/Homework' ; export default class Student implements People { [ key : string ] : any ; public id : number = - 1 ; public name : string = '' ; public curClass : string = '' ; public isActive : boolean = true ; public year : Date = new Date (); public homeworks : [] = []; public init ( data : any ) : boolean { try { this . id = data . id ; this . name = data . name ; this . curClass = data . cur_class ; this . isActive = data . is_active ; this . year = new Date ( data . year ); if ( data . homeworks !== \"null\" ) { this . homeworks = data . homeworks ; } } catch ( e ) { return false ; } return true ; } public toJsonKey ( key : string ) : string { switch ( key ) { case 'id' : { return 'id' ; } case 'name' : { return 'name' ; } case 'curClass' : { return 'cur_class' ; } case 'isActive' : { return 'is_active' ; } case 'year' : { return 'year' ; } case 'homeworks' : { return 'homeworks' ; } default : { return key ; } } } public addHomework ( hw : Homework ) : void { this . Homeworks . push ( hw ); } } The format of the fields goes from left to right in such order \"field name\", \"field type\", \"field JSON name\", and \"initialize as\" (optional, not used in Go and Nim). *Note: There is no gurranttee that \"initialize as\" field goes through a proper conversion or localization based on the targetted output languages so ideally you want to make sure it works with all versions of output that will be using it.","title":"Struct"},{"location":"#enum","text":"Input file: go-filepath path kt-filepath to nim-filepath some py-filepath python ts-filepath file/person Emotion { Accomplished Angry Annoyed Appalled Excited Exhausted FeelsGood Frustrated Happy Meh Sad Satisfied } path/emotion.go /* * This is a generated file * * If you would like to make any changes, please edit the source file instead. * run `nimble genFile \"{SOURCE_FILE}\"` upon completion. * * Source: emotion.enum */ package path type Emotion int const ( Accomplished = iota Angry Annoyed Appalled Excited Exhausted FeelsGood Frustrated Happy Meh Sad Satisfied ) to/Emotion.kt /* * This is a generated file * * If you would like to make any changes, please edit the source file instead. * run `nimble genFile \"{SOURCE_FILE}\"` upon completion. * * Source: emotion.enum */ package to enum class Emotion { Accomplished , Angry , Annoyed , Appalled , Excited , Exhausted , FeelsGood , Frustrated , Happy , Meh , Sad , Satisfied , } some/emotion.nim # This is a generated file # # If you would like to make any changes, please edit the source file instead. # run `nimble genFile \"{SOURCE_FILE}\"` upon completion. # # Source: emotion.enum type Emotion * = enum Accomplished , Angry , Annoyed , Appalled , Excited , Exhausted , FeelsGood , Frustrated , Happy , Meh , Sad , Satisfied , python/emotion.py # This is a generated file # # If you would like to make any changes, please edit the source file instead. # run `nimble genFile \"{SOURCE_FILE}\"` upon completion. # # Source: emotion.enum from enum import Enum , auto class Emotion ( Enum ): Accomplished = auto () Angry = auto () Annoyed = auto () Appalled = auto () Excited = auto () Exhausted = auto () FeelsGood = auto () Frustrated = auto () Happy = auto () Meh = auto () Sad = auto () Satisfied = auto () file/person/Emotion.ts /* * This is a generated file * * If you would like to make any changes, please edit the source file instead. * run `nimble genFile \"{SOURCE_FILE}\"` upon completion. * * Source: emotion.enum */ enum Emotion { Accomplished , Angry , Annoyed , Appalled , Excited , Exhausted , FeelsGood , Frustrated , Happy , Meh , Sad , Satisfied , } export default Emotion ;","title":"Enum"},{"location":"#filepath","text":"Basically the path location of where the generated file lives relative to where the build is ran (which if you use Please or Nimble as suggested, it will always be at the top level folder of this project - wings/ ). If the namespace for a specific language is not defined, the file for that language will not be generated.","title":"filepath"},{"location":"#import","text":"Usually the include or import statement required for some part of the file to work properly. (In this case, its mostly external classes or enums for custom typing.)","title":"import"},{"location":"#implement","text":"In many occassion, your struct or object might be implementing a separate interface class. Use this to specify the class that it is implementing. (There is not support for this in go since it would already inherently associate your struct to the interface if you implemented all the functions and variables defined in the interface.)","title":"implement"},{"location":"#langfunc","text":"Specific functions for specific programming languages. Ideally, you should have a separate utility classes that do all the other operations. This is mostly designed to be used for defining functions in an interface that the struct / class is implementing.","title":"{lang}Func"},{"location":"license/","text":"MIT License Copyright (c) 2019 BinHong Lee Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"license/#mit-license","text":"Copyright (c) 2019 BinHong Lee Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"MIT License"},{"location":"main/","text":"wings.nim Imports os paramCount paramStr tables wingspkg/core Functions private toFile: void Writing the generated output onto the files. Argument Type Description path string Fullpath (including the filename) of the destination file. content string Content to write into the specified file. fromFile: void Read from struct / enum file. Argument Type Description filepath string Full path (can be either relative or absolute) of where the file to read is at. init: void Just a handler to go through each command line argument (and try to open them as a file). Argument Type Description count int Number of command line arguments provided.","title":"wings.nim"},{"location":"main/#wingsnim","text":"","title":"wings.nim"},{"location":"main/#imports","text":"os paramCount paramStr tables wingspkg/core","title":"Imports"},{"location":"main/#functions","text":"","title":"Functions"},{"location":"main/#private","text":"","title":"private"},{"location":"main/#tofile-void","text":"Writing the generated output onto the files. Argument Type Description path string Fullpath (including the filename) of the destination file. content string Content to write into the specified file.","title":"toFile: void"},{"location":"main/#fromfile-void","text":"Read from struct / enum file. Argument Type Description filepath string Full path (can be either relative or absolute) of where the file to read is at.","title":"fromFile: void"},{"location":"main/#init-void","text":"Just a handler to go through each command line argument (and try to open them as a file). Argument Type Description count int Number of command line arguments provided.","title":"init: void"},{"location":"main/wingspkg/core/","text":"core.nim Imports strutils capitalizeAscii contains join normalize parseEnum removeSuffix split splitWhitespace tables lib/header lib/wenum lib/wstruct util/wenumutil util/wstructutil Constants Name Type Description filetypes Table[string, int] Table to iterate through as a collection of all supported filetypes. Functions public fromFile: Table[string, string] Entry point to the file. It gets the file to read and returns a table of output to be written. Argument Type Description filename string Filename of the file to read from. header (Optional) string Customized header. private newFileName: Table[string, string] Generate the appropriate filename based on the naming convention of the given file types. Output key represents the filetype while output value are the filename Argument Type Description filename string Filename of the source file.","title":"core.nim"},{"location":"main/wingspkg/core/#corenim","text":"","title":"core.nim"},{"location":"main/wingspkg/core/#imports","text":"strutils capitalizeAscii contains join normalize parseEnum removeSuffix split splitWhitespace tables lib/header lib/wenum lib/wstruct util/wenumutil util/wstructutil","title":"Imports"},{"location":"main/wingspkg/core/#constants","text":"Name Type Description filetypes Table[string, int] Table to iterate through as a collection of all supported filetypes.","title":"Constants"},{"location":"main/wingspkg/core/#functions","text":"","title":"Functions"},{"location":"main/wingspkg/core/#public","text":"","title":"public"},{"location":"main/wingspkg/core/#fromfile-tablestring-string","text":"Entry point to the file. It gets the file to read and returns a table of output to be written. Argument Type Description filename string Filename of the file to read from. header (Optional) string Customized header.","title":"fromFile: Table[string, string]"},{"location":"main/wingspkg/core/#private","text":"","title":"private"},{"location":"main/wingspkg/core/#newfilename-tablestring-string","text":"Generate the appropriate filename based on the naming convention of the given file types. Output key represents the filetype while output value are the filename Argument Type Description filename string Filename of the source file.","title":"newFileName: Table[string, string]"},{"location":"main/wingspkg/plz/","text":"plz.nim This was some early draft I wrote that I never got around to test if they actually works. Imports strutils indent Functions public goPlzBuild: string Generate the go_library() declaration for please build file. Argument Type Description name string dep seq[string] visibility seq[string] private arr: string Generate the correct please tool array format. Argument Type Description name string arr seq[string]","title":"plz.nim"},{"location":"main/wingspkg/plz/#plznim","text":"This was some early draft I wrote that I never got around to test if they actually works.","title":"plz.nim"},{"location":"main/wingspkg/plz/#imports","text":"strutils indent","title":"Imports"},{"location":"main/wingspkg/plz/#functions","text":"","title":"Functions"},{"location":"main/wingspkg/plz/#public","text":"","title":"public"},{"location":"main/wingspkg/plz/#goplzbuild-string","text":"Generate the go_library() declaration for please build file. Argument Type Description name string dep seq[string] visibility seq[string]","title":"goPlzBuild: string"},{"location":"main/wingspkg/plz/#private","text":"","title":"private"},{"location":"main/wingspkg/plz/#arr-string","text":"Generate the correct please tool array format. Argument Type Description name string arr seq[string]","title":"arr: string"},{"location":"main/wingspkg/lang/go/","text":"go.nim Imports strutils capitalizeAscii contains toLowerAscii replace indent split unindent tables getOrDefault ../lib/varname camelCase ../lib/wstruct ../lib/wenum Functions public genWEnum: string Converts the given WEnum object to an enum file. Argument Type Description wenum WEnum Object with all information needed. genWStruct: string Converts the given WStruct object to a struct file. Argument Type Description wstruct WStruct Object with all information needed. private types: string Converts wings type to Go type. Argument Type Description name string The defined wings type to be converted. wEnumFile: string Generate the Go file with the given info. Argument Type Description name string Name of the enum. values seq[string] Values of the enum. package string The package where this enum is in. wStructFile: string Generate the Go file with the given info. Argument Type Description name string Name of the struct. imports seq[string] File imports fields seq[string] Struct fields. functions string Additional self defined functions. package string The package where this struct is in.","title":"Go"},{"location":"main/wingspkg/lang/go/#gonim","text":"","title":"go.nim"},{"location":"main/wingspkg/lang/go/#imports","text":"strutils capitalizeAscii contains toLowerAscii replace indent split unindent tables getOrDefault ../lib/varname camelCase ../lib/wstruct ../lib/wenum","title":"Imports"},{"location":"main/wingspkg/lang/go/#functions","text":"","title":"Functions"},{"location":"main/wingspkg/lang/go/#public","text":"","title":"public"},{"location":"main/wingspkg/lang/go/#genwenum-string","text":"Converts the given WEnum object to an enum file. Argument Type Description wenum WEnum Object with all information needed.","title":"genWEnum: string"},{"location":"main/wingspkg/lang/go/#genwstruct-string","text":"Converts the given WStruct object to a struct file. Argument Type Description wstruct WStruct Object with all information needed.","title":"genWStruct: string"},{"location":"main/wingspkg/lang/go/#private","text":"","title":"private"},{"location":"main/wingspkg/lang/go/#types-string","text":"Converts wings type to Go type. Argument Type Description name string The defined wings type to be converted.","title":"types: string"},{"location":"main/wingspkg/lang/go/#wenumfile-string","text":"Generate the Go file with the given info. Argument Type Description name string Name of the enum. values seq[string] Values of the enum. package string The package where this enum is in.","title":"wEnumFile: string"},{"location":"main/wingspkg/lang/go/#wstructfile-string","text":"Generate the Go file with the given info. Argument Type Description name string Name of the struct. imports seq[string] File imports fields seq[string] Struct fields. functions string Additional self defined functions. package string The package where this struct is in.","title":"wStructFile: string"},{"location":"main/wingspkg/lang/kt/","text":"ts.nim Imports strutils contains indent replace split tables getOrDefault ../lib/varname camelCase ../lib/wstruct ../lib/wenum Functions public genWEnum: string Converts the given WEnum object to an enum file. Argument Type Description wenum WEnum Object with all information needed. genWStruct: string Converts the given WStruct object to a struct file. Argument Type Description wstruct WStruct Object with all information needed. private types: string Converts wings type to Kotlin type. Argument Type Description name string The defined wings type. typeInit: string Provides the default to be initialzed based on its wings type. Argument Type Description name string The defined wings type. wEnumFile: string Generate the Kotlin file with the given info. Name Type Description name string Name of the enum. values seq[string] Values of the enum. package string The package where this enum is in. wStructFile: string Generate the Kotlin file with the given info. Name Type Description name string Name of the struct. imports seq[string] File imports fields seq[string] Struct fields. functions string Additional self defined functions. implement string An external interface to implement. package string The package where this struct is in.","title":"Kotlin"},{"location":"main/wingspkg/lang/kt/#tsnim","text":"","title":"ts.nim"},{"location":"main/wingspkg/lang/kt/#imports","text":"strutils contains indent replace split tables getOrDefault ../lib/varname camelCase ../lib/wstruct ../lib/wenum","title":"Imports"},{"location":"main/wingspkg/lang/kt/#functions","text":"","title":"Functions"},{"location":"main/wingspkg/lang/kt/#public","text":"","title":"public"},{"location":"main/wingspkg/lang/kt/#genwenum-string","text":"Converts the given WEnum object to an enum file. Argument Type Description wenum WEnum Object with all information needed.","title":"genWEnum: string"},{"location":"main/wingspkg/lang/kt/#genwstruct-string","text":"Converts the given WStruct object to a struct file. Argument Type Description wstruct WStruct Object with all information needed.","title":"genWStruct: string"},{"location":"main/wingspkg/lang/kt/#private","text":"","title":"private"},{"location":"main/wingspkg/lang/kt/#types-string","text":"Converts wings type to Kotlin type. Argument Type Description name string The defined wings type.","title":"types: string"},{"location":"main/wingspkg/lang/kt/#typeinit-string","text":"Provides the default to be initialzed based on its wings type. Argument Type Description name string The defined wings type.","title":"typeInit: string"},{"location":"main/wingspkg/lang/kt/#wenumfile-string","text":"Generate the Kotlin file with the given info. Name Type Description name string Name of the enum. values seq[string] Values of the enum. package string The package where this enum is in.","title":"wEnumFile: string"},{"location":"main/wingspkg/lang/kt/#wstructfile-string","text":"Generate the Kotlin file with the given info. Name Type Description name string Name of the struct. imports seq[string] File imports fields seq[string] Struct fields. functions string Additional self defined functions. implement string An external interface to implement. package string The package where this struct is in.","title":"wStructFile: string"},{"location":"main/wingspkg/lang/nim/","text":"nim.nim Imports strutils capitalizeAscii contains indent normalize replace split tables getOrDefault ../lib/varname camelCase ../lib/wstruct ../lib/wenum Functions public genWEnum: string Converts the given WEnum object to an enum file. Argument Type Description wenum WEnum Object with all information needed. genWStruct: string Converts the given WStruct object to a struct file. Argument Type Description wstruct WStruct Object with all information needed. private types: string Converts wings type to Nim type. Argument Type Description name string The defined wings type to be converted. typeAssign: string Assign the content the way it should be based on the name (type). Argument Type Description name string The defined wings type. content string Content to be assigned. wEnumFile: string Generate the Nim file with the given info. Argument Type Description name string Name of the enum. values seq[string] Values of the enum. wStructFile: string Generate the Nim file with the given info. Argument Type Description name string Name of the struct. imports seq[string] File imports fields seq[string] Struct fields. functions string Additional self defined functions.","title":"Nim"},{"location":"main/wingspkg/lang/nim/#nimnim","text":"","title":"nim.nim"},{"location":"main/wingspkg/lang/nim/#imports","text":"strutils capitalizeAscii contains indent normalize replace split tables getOrDefault ../lib/varname camelCase ../lib/wstruct ../lib/wenum","title":"Imports"},{"location":"main/wingspkg/lang/nim/#functions","text":"","title":"Functions"},{"location":"main/wingspkg/lang/nim/#public","text":"","title":"public"},{"location":"main/wingspkg/lang/nim/#genwenum-string","text":"Converts the given WEnum object to an enum file. Argument Type Description wenum WEnum Object with all information needed.","title":"genWEnum: string"},{"location":"main/wingspkg/lang/nim/#genwstruct-string","text":"Converts the given WStruct object to a struct file. Argument Type Description wstruct WStruct Object with all information needed.","title":"genWStruct: string"},{"location":"main/wingspkg/lang/nim/#private","text":"","title":"private"},{"location":"main/wingspkg/lang/nim/#types-string","text":"Converts wings type to Nim type. Argument Type Description name string The defined wings type to be converted.","title":"types: string"},{"location":"main/wingspkg/lang/nim/#typeassign-string","text":"Assign the content the way it should be based on the name (type). Argument Type Description name string The defined wings type. content string Content to be assigned.","title":"typeAssign: string"},{"location":"main/wingspkg/lang/nim/#wenumfile-string","text":"Generate the Nim file with the given info. Argument Type Description name string Name of the enum. values seq[string] Values of the enum.","title":"wEnumFile: string"},{"location":"main/wingspkg/lang/nim/#wstructfile-string","text":"Generate the Nim file with the given info. Argument Type Description name string Name of the struct. imports seq[string] File imports fields seq[string] Struct fields. functions string Additional self defined functions.","title":"wStructFile: string"},{"location":"main/wingspkg/lang/py/","text":"py.nim Imports strutils capitalizeAscii contains indent replace split tables getOrDefault ../lib/wstruct ../lib/wenum Functions public genWEnum: string Converts the given WEnum object to an enum file. Argument Type Description wenum WEnum Object with all information needed. genWStruct: string Converts the given WStruct object to a struct file. Argument Type Description wstruct WStruct Object with all information needed. private types: string Converts wings type to Python type. Argument Type Description name string The defined wings type to be converted. typeInit: string Provides the default to be initialzed based on its wings type. Argument Type Description name string The defined wings type. wEnumFile: string Generate the Python file with the given info. Argument Type Description name string Name of the enum. values seq[string] Values of the enum. wStructFile: string Generate the Python file with the given info. Argument Type Description name string Name of the struct. imports seq[string] File imports fields seq[string] Struct fields. functions string Additional self defined functions. implement string An external interface to implement.","title":"Python"},{"location":"main/wingspkg/lang/py/#pynim","text":"","title":"py.nim"},{"location":"main/wingspkg/lang/py/#imports","text":"strutils capitalizeAscii contains indent replace split tables getOrDefault ../lib/wstruct ../lib/wenum","title":"Imports"},{"location":"main/wingspkg/lang/py/#functions","text":"","title":"Functions"},{"location":"main/wingspkg/lang/py/#public","text":"","title":"public"},{"location":"main/wingspkg/lang/py/#genwenum-string","text":"Converts the given WEnum object to an enum file. Argument Type Description wenum WEnum Object with all information needed.","title":"genWEnum: string"},{"location":"main/wingspkg/lang/py/#genwstruct-string","text":"Converts the given WStruct object to a struct file. Argument Type Description wstruct WStruct Object with all information needed.","title":"genWStruct: string"},{"location":"main/wingspkg/lang/py/#private","text":"","title":"private"},{"location":"main/wingspkg/lang/py/#types-string","text":"Converts wings type to Python type. Argument Type Description name string The defined wings type to be converted.","title":"types: string"},{"location":"main/wingspkg/lang/py/#typeinit-string","text":"Provides the default to be initialzed based on its wings type. Argument Type Description name string The defined wings type.","title":"typeInit: string"},{"location":"main/wingspkg/lang/py/#wenumfile-string","text":"Generate the Python file with the given info. Argument Type Description name string Name of the enum. values seq[string] Values of the enum.","title":"wEnumFile: string"},{"location":"main/wingspkg/lang/py/#wstructfile-string","text":"Generate the Python file with the given info. Argument Type Description name string Name of the struct. imports seq[string] File imports fields seq[string] Struct fields. functions string Additional self defined functions. implement string An external interface to implement.","title":"wStructFile: string"},{"location":"main/wingspkg/lang/ts/","text":"ts.nim Imports strutils contains indent intToStr replace split tables getOrDefault ../lib/varname camelCase ../lib/wstruct ../lib/wenum Functions public genWEnum: string Converts the given WEnum object to an enum file. Argument Type Description wenum WEnum Object with all information needed. genWStruct: string Converts the given WStruct object to a struct file. Argument Type Description wstruct WStruct Object with all information needed. private types: string Converts wings type to TypeScript type. Argument Type Description name string The defined wings type. typeAssign: string Assign the content the way it should be based on the name (type). Argument Type Description name string The defined wings type. content string Content to be assigned. typeInit: string Provides the default to be initialzed based on its wings type. Argument Type Description name string The defined wings type. wEnumFile: string Generate the TypeScript file with the given info. Name Type Description name string Name of the enum. values seq[string] Values of the enum. wStructFile: string Generate the TypeScript file with the given info. Name Type Description name string Name of the struct. imports seq[string] File imports fields seq[string] Struct fields. functions string Additional self defined functions. implement string An external interface to implement.","title":"TypeScript"},{"location":"main/wingspkg/lang/ts/#tsnim","text":"","title":"ts.nim"},{"location":"main/wingspkg/lang/ts/#imports","text":"strutils contains indent intToStr replace split tables getOrDefault ../lib/varname camelCase ../lib/wstruct ../lib/wenum","title":"Imports"},{"location":"main/wingspkg/lang/ts/#functions","text":"","title":"Functions"},{"location":"main/wingspkg/lang/ts/#public","text":"","title":"public"},{"location":"main/wingspkg/lang/ts/#genwenum-string","text":"Converts the given WEnum object to an enum file. Argument Type Description wenum WEnum Object with all information needed.","title":"genWEnum: string"},{"location":"main/wingspkg/lang/ts/#genwstruct-string","text":"Converts the given WStruct object to a struct file. Argument Type Description wstruct WStruct Object with all information needed.","title":"genWStruct: string"},{"location":"main/wingspkg/lang/ts/#private","text":"","title":"private"},{"location":"main/wingspkg/lang/ts/#types-string","text":"Converts wings type to TypeScript type. Argument Type Description name string The defined wings type.","title":"types: string"},{"location":"main/wingspkg/lang/ts/#typeassign-string","text":"Assign the content the way it should be based on the name (type). Argument Type Description name string The defined wings type. content string Content to be assigned.","title":"typeAssign: string"},{"location":"main/wingspkg/lang/ts/#typeinit-string","text":"Provides the default to be initialzed based on its wings type. Argument Type Description name string The defined wings type.","title":"typeInit: string"},{"location":"main/wingspkg/lang/ts/#wenumfile-string","text":"Generate the TypeScript file with the given info. Name Type Description name string Name of the enum. values seq[string] Values of the enum.","title":"wEnumFile: string"},{"location":"main/wingspkg/lang/ts/#wstructfile-string","text":"Generate the TypeScript file with the given info. Name Type Description name string Name of the struct. imports seq[string] File imports fields seq[string] Struct fields. functions string Additional self defined functions. implement string An external interface to implement.","title":"wStructFile: string"},{"location":"main/wingspkg/lib/header/","text":"header.nim Imports strutils indent Functions public genHeader: string Returns a string of a header generated based on given expected output filetype (since different programming languages have different way of writing comments). Note: There will always be a line at the end of the header pointing to the source file. Argument Type Description filetype string Target programming languages for the header. source string The source file . text (Optional) string Personalized header text.","title":"header.nim"},{"location":"main/wingspkg/lib/header/#headernim","text":"","title":"header.nim"},{"location":"main/wingspkg/lib/header/#imports","text":"strutils indent","title":"Imports"},{"location":"main/wingspkg/lib/header/#functions","text":"","title":"Functions"},{"location":"main/wingspkg/lib/header/#public","text":"","title":"public"},{"location":"main/wingspkg/lib/header/#genheader-string","text":"Returns a string of a header generated based on given expected output filetype (since different programming languages have different way of writing comments). Note: There will always be a line at the end of the header pointing to the source file. Argument Type Description filetype string Target programming languages for the header. source string The source file . text (Optional) string Personalized header text.","title":"genHeader: string"},{"location":"main/wingspkg/lib/varname/","text":"varname.nim Imports strutils capitalizeAscii split sequtils foldr Functions public camelCase: string Converts the input string to camelCase. Argument Type Description variable string String to be converted to camelCase.","title":"varname.nim"},{"location":"main/wingspkg/lib/varname/#varnamenim","text":"","title":"varname.nim"},{"location":"main/wingspkg/lib/varname/#imports","text":"strutils capitalizeAscii split sequtils foldr","title":"Imports"},{"location":"main/wingspkg/lib/varname/#functions","text":"","title":"Functions"},{"location":"main/wingspkg/lib/varname/#public","text":"","title":"public"},{"location":"main/wingspkg/lib/varname/#camelcase-string","text":"Converts the input string to camelCase. Argument Type Description variable string String to be converted to camelCase.","title":"camelCase: string"},{"location":"main/wingspkg/lib/wenum/","text":"wenum.nim Imports strutils splitWhitespace tables Type WEnum: object Argument Type Description name string Enum type name. values seq[string] All the enum values. package Table[string, string] Map of filetype and each of its package. Functions public newWEnum: WEnum Returns an empty initialized WEnum . parseFile: void Parse the WEnum from the given file to the given WEnum object. Argument Type Description wenum WEnum Target WEnum to parse the data from the file to. file File Source file to parse data from. filename string Name of source file. package Table[string, string] Package of the result file should be in.","title":"wenum.nim"},{"location":"main/wingspkg/lib/wenum/#wenumnim","text":"","title":"wenum.nim"},{"location":"main/wingspkg/lib/wenum/#imports","text":"strutils splitWhitespace tables","title":"Imports"},{"location":"main/wingspkg/lib/wenum/#type","text":"","title":"Type"},{"location":"main/wingspkg/lib/wenum/#wenum-object","text":"Argument Type Description name string Enum type name. values seq[string] All the enum values. package Table[string, string] Map of filetype and each of its package.","title":"WEnum: object"},{"location":"main/wingspkg/lib/wenum/#functions","text":"","title":"Functions"},{"location":"main/wingspkg/lib/wenum/#public","text":"","title":"public"},{"location":"main/wingspkg/lib/wenum/#newwenum-wenum","text":"Returns an empty initialized WEnum .","title":"newWEnum: WEnum"},{"location":"main/wingspkg/lib/wenum/#parsefile-void","text":"Parse the WEnum from the given file to the given WEnum object. Argument Type Description wenum WEnum Target WEnum to parse the data from the file to. file File Source file to parse data from. filename string Name of source file. package Table[string, string] Package of the result file should be in.","title":"parseFile: void"},{"location":"main/wingspkg/lib/wstruct/","text":"wstruct.nim Imports strutils contains join removeSuffix split splitWhitespace sequtils foldr tables Type WStruct: object Argument Type Description name string Struct type name. fields seq[string] All the struct fields. function Table[string, string] Map of filetype and each of its function. implement Table[string, string] Map of filetype and each of its implement. package Table[string, string] Map of filetype and each of its package. imports Table[string, seq[string]] Map of filetype and a sequence of their import(s). Functions public newWStruct: WStruct Returns an empty initialized WStruct . parseFile: void Parse the WStruct from the given file to the given WStruct object. Argument Type Description wstruct WStruct Target WStruct to parse the data from the file to. file File Source file to parse data from. filename string Name of source file. package Table[string, string] Package of the result file should be in.","title":"wstruct.nim"},{"location":"main/wingspkg/lib/wstruct/#wstructnim","text":"","title":"wstruct.nim"},{"location":"main/wingspkg/lib/wstruct/#imports","text":"strutils contains join removeSuffix split splitWhitespace sequtils foldr tables","title":"Imports"},{"location":"main/wingspkg/lib/wstruct/#type","text":"","title":"Type"},{"location":"main/wingspkg/lib/wstruct/#wstruct-object","text":"Argument Type Description name string Struct type name. fields seq[string] All the struct fields. function Table[string, string] Map of filetype and each of its function. implement Table[string, string] Map of filetype and each of its implement. package Table[string, string] Map of filetype and each of its package. imports Table[string, seq[string]] Map of filetype and a sequence of their import(s).","title":"WStruct: object"},{"location":"main/wingspkg/lib/wstruct/#functions","text":"","title":"Functions"},{"location":"main/wingspkg/lib/wstruct/#public","text":"","title":"public"},{"location":"main/wingspkg/lib/wstruct/#newwstruct-wstruct","text":"Returns an empty initialized WStruct .","title":"newWStruct: WStruct"},{"location":"main/wingspkg/lib/wstruct/#parsefile-void","text":"Parse the WStruct from the given file to the given WStruct object. Argument Type Description wstruct WStruct Target WStruct to parse the data from the file to. file File Source file to parse data from. filename string Name of source file. package Table[string, string] Package of the result file should be in.","title":"parseFile: void"},{"location":"main/wingspkg/util/wenumutil/","text":"wenumutil.nim Imports strutils split tables ../lib/wenum ../lang/go ../lang/kt ../lang/nim ../lang/py ../lang/ts Functions public genFiles: Table[string, string] Generate the files for all the natively supported output types. Argument Type Description wenum WEnum WEnum object source for the out files.","title":"wenumutil.md"},{"location":"main/wingspkg/util/wenumutil/#wenumutilnim","text":"","title":"wenumutil.nim"},{"location":"main/wingspkg/util/wenumutil/#imports","text":"strutils split tables ../lib/wenum ../lang/go ../lang/kt ../lang/nim ../lang/py ../lang/ts","title":"Imports"},{"location":"main/wingspkg/util/wenumutil/#functions","text":"","title":"Functions"},{"location":"main/wingspkg/util/wenumutil/#public","text":"","title":"public"},{"location":"main/wingspkg/util/wenumutil/#genfiles-tablestring-string","text":"Generate the files for all the natively supported output types. Argument Type Description wenum WEnum WEnum object source for the out files.","title":"genFiles: Table[string, string]"},{"location":"main/wingspkg/util/wstructutil/","text":"wstructutil.nim Imports strutils split tables ../lib/wstruct ../lang/go ../lang/kt ../lang/nim ../lang/py ../lang/ts Functions public genFiles: Table[string, string] Generate the files for all the natively supported output types. Argument Type Description wstruct WStruct WStruct object source for the out files.","title":"wstructutil.md"},{"location":"main/wingspkg/util/wstructutil/#wstructutilnim","text":"","title":"wstructutil.nim"},{"location":"main/wingspkg/util/wstructutil/#imports","text":"strutils split tables ../lib/wstruct ../lang/go ../lang/kt ../lang/nim ../lang/py ../lang/ts","title":"Imports"},{"location":"main/wingspkg/util/wstructutil/#functions","text":"","title":"Functions"},{"location":"main/wingspkg/util/wstructutil/#public","text":"","title":"public"},{"location":"main/wingspkg/util/wstructutil/#genfiles-tablestring-string","text":"Generate the files for all the natively supported output types. Argument Type Description wstruct WStruct WStruct object source for the out files.","title":"genFiles: Table[string, string]"},{"location":"tsUtil/","text":"wings-ts-util Requirements TypeScript Usage person.struct ts-filepath path/to/tsfile ts-import { IWingsStruct }:wings-ts-util ts-implement IWingsStruct Person { id int -1 name str } TypeScript import { WingsStructUtil } from wings - ts - util ; import Person from 'path/to/tsfile' ; export class SomeClass { public static someFunction ( someone : Person ) : string { return WingsStructUtil . stringify ( someone ); } public static personIsWingsStruct ( someone : Person ) : bool { return WingsStructUtil . isIWingsStruct ( someone ); } }","title":"Overview"},{"location":"tsUtil/#wings-ts-util","text":"","title":"wings-ts-util"},{"location":"tsUtil/#requirements","text":"TypeScript","title":"Requirements"},{"location":"tsUtil/#usage","text":"person.struct ts-filepath path/to/tsfile ts-import { IWingsStruct }:wings-ts-util ts-implement IWingsStruct Person { id int -1 name str } TypeScript import { WingsStructUtil } from wings - ts - util ; import Person from 'path/to/tsfile' ; export class SomeClass { public static someFunction ( someone : Person ) : string { return WingsStructUtil . stringify ( someone ); } public static personIsWingsStruct ( someone : Person ) : bool { return WingsStructUtil . isIWingsStruct ( someone ); } }","title":"Usage"},{"location":"tsUtil/index.ts/","text":"index.ts Interface IWingsStruct toJsonKey Converts given variable names into their predefined JSON key (in the original .struct / .enum file). Argument Type Description key string Variable name to be converted into JSON key. Class WingsStructUtil Note: All functions are static functions. public isIWingsStruct: arg is IWingsStruct Returns if the object provided in arg is an IWingsStruct . Argument Type Description arg any Object to be tested. stringify: string Returns a JSON in string format of the given object in obj . Argument Type Description obj any Object to be stringified. private valString: string Turns the given val into its appropriate string format to be included as part of the JSON output (for stringify() ). Argument Type Description val any Value to be turned into a string . wrap: string Wrap and return the given string with a double quote around it. Argument Type Description toWrap string String to be wrapped.","title":"Source"},{"location":"tsUtil/index.ts/#indexts","text":"","title":"index.ts"},{"location":"tsUtil/index.ts/#interface","text":"","title":"Interface"},{"location":"tsUtil/index.ts/#iwingsstruct","text":"toJsonKey Converts given variable names into their predefined JSON key (in the original .struct / .enum file). Argument Type Description key string Variable name to be converted into JSON key.","title":"IWingsStruct"},{"location":"tsUtil/index.ts/#class","text":"","title":"Class"},{"location":"tsUtil/index.ts/#wingsstructutil","text":"Note: All functions are static functions.","title":"WingsStructUtil"},{"location":"tsUtil/index.ts/#public","text":"isIWingsStruct: arg is IWingsStruct Returns if the object provided in arg is an IWingsStruct . Argument Type Description arg any Object to be tested. stringify: string Returns a JSON in string format of the given object in obj . Argument Type Description obj any Object to be stringified.","title":"public"},{"location":"tsUtil/index.ts/#private","text":"valString: string Turns the given val into its appropriate string format to be included as part of the JSON output (for stringify() ). Argument Type Description val any Value to be turned into a string . wrap: string Wrap and return the given string with a double quote around it. Argument Type Description toWrap string String to be wrapped.","title":"private"}]}