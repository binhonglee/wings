{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"wings","text":"<p>A simple customizable cross language struct and enum file generator.</p> <p>Click here for code documentation index instead.</p>"},{"location":"#installation","title":"Installation","text":""},{"location":"#script-easiest","title":"Script (easiest)","text":"<p>Just run the following in your terminal.</p> <pre><code>curl -s https://wings.sh/install.sh | sh\n</code></pre>"},{"location":"#nimble-easy-ish","title":"Nimble (easy-ish)","text":"<p>If you have <code>nimble</code> installed, you can just do <code>nimble install wings</code>.</p>"},{"location":"#github-release-manual","title":"GitHub Release (manual)","text":"<p>If you prefer to download them manually instead, you could do the following.</p> <ul> <li>Download the appropriate binary here.</li> <li>Add binary to an included path and rename it to <code>wings</code>.</li> <li>Run <code>wings {filepath}</code> to generate the files. (eg. <code>wings /path/to/student.wings</code>)</li> </ul> <p>Note: While there are Windows binaries available for download from GitHub release page, they aren't thoroughly tested and some features (like self-updating) might not work as intended.</p>"},{"location":"#compile-from-source-from-scratch","title":"Compile from source (from scratch)","text":"<p>If you'd like to compile it from source, you can clone the repo and compile it with the release script.</p> <pre><code>git clone git@github.com:binhonglee/wings.git\ncd wings/\n./pleasew release\n</code></pre>"},{"location":"#vscode-additional-plugin","title":"VSCode (additional plugin)","text":"<p>If you are coding with VSCode, its recommended that you also install this plugin to get proper syntax highlighting on your wings files.</p>"},{"location":"#struct","title":"Struct","text":"<p>Input file:</p> student.wings <pre>\n  go-filepath examples/go/classroom\n  kt-filepath examples/kt\n  nim-filepath examples/nim\n  py-filepath examples/py\n  ts-filepath examples/ts\n\n  py-import examples.output.py.people\n  ts-import { IWingsStruct }:wings-ts-util\n  import examples/input/emotion.wings\n  import examples/input/homework.wings\n\n  py-implement People\n  ts-implement IWingsStruct\n\n  # Any person who is studying in a class\n\n  struct Student {\n    id          int       -1\n    name        str\n    cur_class   str\n    feeling     Emotion   Emotion.Meh\n    is_active   bool\n    year        date\n    graduation  date\n    homeworks   []Homework\n    something   Map&lt;str,str&gt;\n  }\n\n  ts-func(\n    public addHomework(hw: Homework): void {\n      this.Homeworks.push(hw);\n    }\n  )\n</pre> <p>Output files:</p> examples/go/classroom/student.go <pre><code>// This is a generated file\n//\n// If you would like to make any changes, please edit the source file instead.\n// run `plz genFile -- \"{SOURCE_FILE}\" -c:wings.json` upon completion.\n// Source: examples/input/student.wings\n\npackage classroom\n\nimport (\nperson \"github.com/binhonglee/wings/examples/output/go/person\"\n\"time\"\n)\n\n// Student - Any person who is studying in a class\ntype Student struct {\nID            int                  `json:\"id\"`\nName          string               `json:\"name\"`\nCurClass      string               `json:\"cur_class\"`\nFeeling       person.Emotion       `json:\"feeling\"`\nIsActive      bool                 `json:\"is_active\"`\nYear          time.Time            `json:\"year\"`\nGraduation    time.Time            `json:\"graduation\"`\nHomeworks     []Homework           `json:\"homeworks\"`\nSomething     map[string]string    `json:\"something\"`\n}\n\n// Students - An array of Student\ntype Students []Student\n</code></pre> examples/kt/Student.kt <pre><code>// This is a generated file\n//\n// If you would like to make any changes, please edit the source file instead.\n// run `plz genFile -- \"{SOURCE_FILE}\" -c:wings.json` upon completion.\n// Source: examples/input/student.wings\n\npackage kt\n\n// Any person who is studying in a class\nclass Student {\nvar ID: Int = -1\nvar name: String = \"\"\nvar curClass: String = \"\"\nvar feeling: Emotion = Emotion.Meh\nvar isActive: Boolean = false\nvar year: Date = Date()\nvar graduation: Date = Date()\nvar homeworks: ArrayList&lt;Homework&gt; = arrayListOf&lt;Homework&gt;()\nvar something: HashMap&lt;String, String&gt; = hashMapOf&lt;String, String&gt;()\n\nfun toJsonKey(key: string): string {\nwhen (key) {\n\"ID\" -&gt; return \"id\"\n\"name\" -&gt; return \"name\"\n\"curClass\" -&gt; return \"cur_class\"\n\"feeling\" -&gt; return \"feeling\"\n\"isActive\" -&gt; return \"is_active\"\n\"year\" -&gt; return \"year\"\n\"graduation\" -&gt; return \"graduation\"\n\"homeworks\" -&gt; return \"homeworks\"\n\"something\" -&gt; return \"something\"\nelse -&gt; return key\n}\n}\n}\n</code></pre> examples/nim/student.nim <pre><code># This is a generated file\n#\n# If you would like to make any changes, please edit the source file instead.\n# run `plz genFile -- \"{SOURCE_FILE}\" -c:wings.json` upon completion.\n# Source: examples/input/student.wings\n\nimport json\nimport ./homework\nimport tables\nimport ./emotion\n\ntype\nStudent* = ref object\n## Any person who is studying in a class\nID*: int\nname*: string\ncurClass*: string\nfeeling*: Emotion\nisActive*: bool\nyear*: DateTime\ngraduation*: DateTime\nhomeworks*: seq[Homework]\nsomething*: Table[string, string]\n</code></pre> examples/py/student.py <pre><code># This is a generated file\n#\n# If you would like to make any changes, please edit the source file instead.\n# run `plz genFile -- \"{SOURCE_FILE}\" -c:wings.json` upon completion.\n# Source: examples/input/student.wings\n\nimport json\nimport examples.output.py.homework\nimport examples.output.py.people\nimport examples.output.py.emotion\nfrom datetime import datetime\n\n# Any person who is studying in a class\nclass Student(People):\n  id: int = -1\n  name: str = \"\"\n  cur_class: str = \"\"\n  feeling: Emotion = Emotion.Meh\n  is_active: bool = False\n  year: datetime = datetime.now()\n  graduation: datetime = datetime.now()\n  homeworks: list = []\n  something: dict = {}\n\n  def __init__(self, data):\n    self = json.loads(data)\n</code></pre> examples/ts/Student.ts <pre><code>// This is a generated file\n//\n// If you would like to make any changes, please edit the source file instead.\n// run `plz genFile -- \"{SOURCE_FILE}\" -c:wings.json` upon completion.\n// Source: examples/input/student.wings\n\nimport { parseMap } from 'wings-ts-util';\nimport Homework from './Homework';\nimport { IWingsStruct } from 'wings-ts-util';\nimport Emotion from './person/Emotion';\n\n// Any person who is studying in a class\nexport default class Student implements IWingsStruct {\n[key: string]: any;\npublic ID: number = -1;\npublic name: string = '';\npublic curClass: string = '';\npublic feeling: Emotion = Emotion.Meh;\npublic isActive: boolean = false;\npublic year: Date = new Date();\npublic graduation: Date = new Date();\npublic homeworks: Homework[] = [];\npublic something: Map&lt;string, string&gt; = new Map&lt;string, string&gt;();\n\npublic constructor(obj?: any) {\nif (obj) {\nthis.ID = obj.id !== undefined &amp;&amp; obj.id !== null ? obj.id : -1;\nthis.name = obj.name !== undefined &amp;&amp; obj.name !== null ? obj.name : '';\nthis.curClass = obj.cur_class !== undefined &amp;&amp; obj.cur_class !== null ? obj.cur_class : '';\nthis.feeling = obj.feeling !== undefined &amp;&amp; obj.feeling !== null ? obj.feeling : Emotion.Meh;\nthis.isActive = obj.is_active !== undefined &amp;&amp; obj.is_active !== null ? obj.is_active : false;\nthis.year = obj.year !== undefined &amp;&amp; obj.year !== null ? new Date(obj.year) : new Date();\nthis.graduation = obj.graduation !== undefined &amp;&amp; obj.graduation !== null ? new Date(obj.graduation) : new Date();\nthis.homeworks = obj.homeworks !== undefined &amp;&amp; obj.homeworks !== null ? obj.homeworks : [];\nthis.something = obj.something !== undefined &amp;&amp; obj.something !== null ? parseMap&lt;string&gt;(obj.something) : new Map&lt;string, string&gt;();\n}\n}\n\npublic toJsonKey(key: string): string {\nswitch (key) {\ncase 'ID': {\nreturn 'id';\n}\ncase 'name': {\nreturn 'name';\n}\ncase 'curClass': {\nreturn 'cur_class';\n}\ncase 'feeling': {\nreturn 'feeling';\n}\ncase 'isActive': {\nreturn 'is_active';\n}\ncase 'year': {\nreturn 'year';\n}\ncase 'graduation': {\nreturn 'graduation';\n}\ncase 'homeworks': {\nreturn 'homeworks';\n}\ncase 'something': {\nreturn 'something';\n}\ndefault: {\nreturn key;\n}\n}\n}\n\npublic addHomework(hw: Homework): void {\nthis.Homeworks.push(hw);\n}\n}\n</code></pre> <p>The format of the fields goes from left to right in such order \"field name\", \"field type\", \"field JSON name\", and \"initialize as\" (optional, not used in Go and Nim).</p> <p>*Note: There is no gurranttee that \"initialize as\" field goes through a proper conversion or localization based on the targetted output languages so ideally you want to make sure it works with all versions of output that will be using it.</p>"},{"location":"#enum","title":"Enum","text":"<p>Input file:</p> emotion.wings <pre>\n  go-filepath examples/go\n  kt-filepath examples/kt\n  nim-filepath examples/nim\n  py-filepath examples/py\n  ts-filepath examples/ts/person\n\n  //Ignored comment\n  // Another ignored comment\n\n  enum Emotion {\n    Accomplished\n    Angry\n    Annoyed\n    Appalled\n    Excited\n    Exhausted\n    FeelsGood\n    Frustrated\n    Happy\n    Meh\n    Sad\n    Satisfied\n  }\n</pre> <p>Output files:</p> examples/go/emotion.go <pre><code>// This is a generated file\n//\n// If you would like to make any changes, please edit the source file instead.\n// run `plz genFile -- \"{SOURCE_FILE}\" -c:wings.json` upon completion.\n// Source: examples/input/emotion.wings\n\npackage person\n\ntype Emotion int\n\nconst (\nAccomplished = iota\nAngry = iota\nAnnoyed = iota\nAppalled = iota\nExcited = iota\nExhausted = iota\nFeelsGood = iota\nFrustrated = iota\nHappy = iota\nMeh = iota\nSad = iota\nSatisfied = iota\n)\n</code></pre> examples/kt/Emotion.kt <pre><code>// This is a generated file\n//\n// If you would like to make any changes, please edit the source file instead.\n// run `plz genFile -- \"{SOURCE_FILE}\" -c:wings.json` upon completion.\n// Source: examples/input/emotion.wings\n\npackage kt\n\nenum class Emotion {\nAccomplished\nAngry\nAnnoyed\nAppalled\nExcited\nExhausted\nFeelsGood\nFrustrated\nHappy\nMeh\nSad\nSatisfied\n}\n</code></pre> examples/nim/emotion.nim <pre><code># This is a generated file\n#\n# If you would like to make any changes, please edit the source file instead.\n# run `plz genFile -- \"{SOURCE_FILE}\" -c:wings.json` upon completion.\n# Source: examples/input/emotion.wings\n\ntype\nEmotion* = enum\nAccomplished\nAngry\nAnnoyed\nAppalled\nExcited\nExhausted\nFeelsGood\nFrustrated\nHappy\nMeh\nSad\nSatisfied\n</code></pre> examples/py/emotion.py <pre><code># This is a generated file\n#\n# If you would like to make any changes, please edit the source file instead.\n# run `plz genFile -- \"{SOURCE_FILE}\" -c:wings.json` upon completion.\n# Source: examples/input/emotion.wings\n\nfrom enum import Enum, auto\n\nclass Emotion(Enum):\n  Accomplished = auto()\n  Angry = auto()\n  Annoyed = auto()\n  Appalled = auto()\n  Excited = auto()\n  Exhausted = auto()\n  FeelsGood = auto()\n  Frustrated = auto()\n  Happy = auto()\n  Meh = auto()\n  Sad = auto()\n  Satisfied = auto()\n</code></pre> examples/ts/person/Emotion.ts <pre><code>// This is a generated file\n//\n// If you would like to make any changes, please edit the source file instead.\n// run `plz genFile -- \"{SOURCE_FILE}\" -c:wings.json` upon completion.\n// Source: examples/input/emotion.wings\n\nenum Emotion {\nAccomplished,\nAngry,\nAnnoyed,\nAppalled,\nExcited,\nExhausted,\nFeelsGood,\nFrustrated,\nHappy,\nMeh,\nSad,\nSatisfied,\n}\n\nexport default Emotion;\n</code></pre> <p>If you are interested in testing out an experimental feature, we also have some basic support for abstract functions on interface documented here.</p>"},{"location":"config/","title":"Config","text":"<p>These are the fields of the config file (<code>-c:&lt;FILENAME&gt;</code>). Currently its only supported in <code>json</code> format. Checkout the file in the repository (here) for reference.</p>"},{"location":"config/#acronyms-str","title":"acronyms: <code>[]str</code>","text":"<p>You can specify specific cases where a word in a parameter name should be full caps instead of just camelCase or PascalCase. For eg, <code>ID</code> instead of <code>id</code> or <code>Id</code>.</p> <p>See here for more information about how its used.</p>"},{"location":"config/#header-str","title":"header: <code>[]str</code>","text":"<p>This is the header comment to be added to the generated files. The array of strings will be joined with a <code>\\n</code> character so you can have multiline comment by having each line of comment as a separate string in this array. If you have <code>{#SOURCE_FILE}</code> included in there, it will be replaced with the path to the source wings file where this is generated from.</p> <pre><code>{\n\"header\": [\n\"Line 1\",\n\"Line 2\",\n\"etc...\"\n]\n}\n</code></pre>"},{"location":"config/#langconfigs-str","title":"langConfigs: <code>[]str</code>","text":"<p>The array of language config files to use. If this is left empty, it will just fallback to built-in supported language template files.</p>"},{"location":"config/#langfilter-str","title":"langFilter: <code>[]str</code>","text":"<p>This is a filter to limit the language of output files to be generated. If left empty, all languages with the correct given language template files will be generated. This is mostly for use if when you have multiple repository that sync with wings file but doesn't want duplicated unwanted generated file at different repository (eg. both frontend and backend repo would have the same wings file but you only want the TypeScript file in frontend and Go file in the backend so you set up different filter in each of the <code>wings.json</code>).</p>"},{"location":"config/#logging-int","title":"logging: <code>int</code>","text":"<p>The <code>int</code> value represents how verbose the logging do you expect. Logging levels are defined here as an Enum.</p>"},{"location":"config/#outputrootdirs-str","title":"outputRootDirs: <code>[]str</code>","text":"<p>There are scenario where you want to write the generated files to a different root path or write them to multiple different filepaths. You can clarify here which folder should be considered the root folder when creating the generated files. Empty string would mean the caller folder. Error will be thrown if a folder defined here cannot be found.</p> <p>Note: The call should be made in the deeper of the different folder hierarchies.</p>"},{"location":"config/#prefixes-mapstrstr","title":"prefixes: <code>Map&lt;str,str&gt;</code>","text":"<p>This is mainly created for <code>go</code> since the import path isn't just relative from the file calling it nor the top level location of the project folder but rather, something that can be defined in the <code>go.mod</code> file. This allows <code>go</code> to have customized import path prefix.</p> <pre><code>{\n\"prefixes\": {\n\"go\": \"github.com/binhonglee/wings\"\n}\n}\n</code></pre>"},{"location":"config/#skipimport-bool","title":"skipImport: <code>bool</code>","text":"<p>When <code>skipimport</code> is set to <code>true</code>, wings will skip parsing and generating imported wings file(s) and only generate from the wings file given.</p> <p>Note: If you'd like to use a remote template file instead of writing your own, check out the remote template feature in the experimental page.</p>"},{"location":"design/","title":"Design","text":""},{"location":"design/#goal","title":"Goal","text":"<p>Allow customizable cross language object (struct) and enum code generation to maintain variable name and type consistency across stack. In the case of wings, you only have to create / maintain the <code>.wings</code> file and wings will generate its corresponding output files. See home for example.</p>"},{"location":"design/#flow","title":"Flow","text":"<p>Here's a diagram for a high level illustration on how the files are generated. (More explanation on each steps are available below after the diagram.)</p> <p></p> <p>Note: Intentionally using API doc for linking most of the \"Source\" since code location might change and API doc will usually automatically update based on that.</p>"},{"location":"design/#user-defined-wings-file","title":"User defined <code>.wings</code> file","text":"<p>Reading the user input files.</p> <p>Source</p>"},{"location":"design/#parse-into-iwings","title":"Parse into <code>IWings</code>","text":"<p>Parse the wings file into an <code>IWings</code> object type. More details on wings syntax here.</p> <p>Source</p>"},{"location":"design/#check-and-fulfill-dependency","title":"Check and fulfill dependency","text":"<p>After parsing all the wings file and understanding each of their dependencies (wings file does not allow circular dependency), it would start parsing (fulfilling) it from the one that doesn't have dependency and work its way up. If <code>skipImport</code> is set to <code>true</code> in the config file, it would skip generating output files of the dependencies that isn't included in the CLI argument and goes straight to generating its output filenames (required for next step).</p> <p>Source</p>"},{"location":"design/#parse-into-templatable","title":"Parse into <code>Templatable</code>","text":"<p>Once the dependency of the wings file is fulfilled, it can now be parsed to <code>Templatable</code> object type. (Dependency needs to be fulfilled first before this step because this step needs the file name / location of the files it depends on which can only be obtained from generating its wings file.)</p> <p>Source</p>"},{"location":"design/#wingsjson","title":"wings.json","text":"<p>Reading the user config file.</p> <p>Source</p>"},{"location":"design/#parse-into-config","title":"Parse into Config","text":"<p>Parse user config file into <code>Config</code> object type. More details on how config files work here.</p> <p>Source</p>"},{"location":"design/#generate-tconfigs","title":"Generate <code>TConfig</code>(s)","text":"<p>Based on <code>Config</code>, parse each language specific output config file into <code>TConfig</code>. <code>TConfig</code> is essentially the language template file to tell wings how the output language is formatted. More details on how template files work here.</p> <p>Source</p>"},{"location":"design/#generate-output-content","title":"Generate output content","text":"<p>Generate output content by parsing information from <code>Templatable</code> based on the format / design specified in <code>TConfig</code>.</p> <p>Source</p>"},{"location":"design/#create-write-into-output-file","title":"Create + write into output file","text":"<p>Create the destination file and folder (if they do not already exist) and write output content into it (overwrite original file content if it exist). If there is a write protected existing file, this step would fail.</p> <p>Source</p>"},{"location":"experimental/","title":"Experimental","text":"<p>This page generally documents features that are experimental with no guarantee that its support will remain as the project goes on. As they get more stable, each sections will be moved to its own appropriate page.</p>"},{"location":"experimental/#remote-template","title":"Remote Template","text":"<p>To use a remote language config file (template) instead of a local one, you can add something like the following to your <code>wings.json</code>. Hash field is optional. If a hash is not defined, it will not be checked. If a hash is defined and it does not match the hash of the downloaded file, it will not be parsed.</p> <pre><code>\"remoteLangConfigs\": [{\n\"url\": \"https://raw.githubusercontent.com/binhonglee/wings/devel/examples/input/templates/go.json\",\n\"hash\": \"F6F38AE46ACB6A79EB333D360EF3705CBF76CDC1\"\n}, {\n\"url\": \"https://raw.githubusercontent.com/binhonglee/wings/devel/examples/input/templates/kt.json\",\n\"hash\": \"7885BBF682B5A931468A0A6BA51B47EA9CB31C79\"\n}, {\n\"url\": \"https://raw.githubusercontent.com/binhonglee/wings/devel/examples/input/templates/nim.json\",\n\"hash\": \"BF55F9715D5997EE718DF811AB5F7194A76DF404\"\n}, {\n\"url\": \"https://raw.githubusercontent.com/binhonglee/wings/devel/examples/input/templates/py.json\",\n\"hash\": \"CC07CDD6622A39E0E09A13E6107FC3BBBC8A428B\"\n}, {\n\"url\": \"https://raw.githubusercontent.com/binhonglee/wings/devel/examples/input/templates/ts.json\",\n\"hash\": \"9E59AB2883F3C1DE2E6338622E067588420A069C\"\n}]\n</code></pre>"},{"location":"experimental/#interface","title":"Interface","text":"<p>Input file:</p> sample_interface.wings <pre>\n  go-filepath examples/go\n  kt-filepath examples/kt\n  ts-filepath examples/ts\n\n  import examples/input/emotion.wings\n\n  # Just some interface\n\n  interface Student {\n  }\n\n  wings-func(\n    public functionOne (firstParam: str, secondParam: str) void\n    public functionTwo () str\n  )\n\n</pre> <p>Output files:</p> examples/go/sampleinterface.go <pre><code>// This is a generated file\n//\n// If you would like to make any changes, please edit the source file instead.\n// run `plz genFile -- \"{SOURCE_FILE}\" -c:wings.json` upon completion.\n// Source: examples/input/sample_interface.wings\n\npackage go\n\nimport (\nperson \"github.com/binhonglee/wings/examples/output/go/person\"\n)\n\n// SampleInterface - Just some interface\ntype SampleInterface interface {\nFunctionTwo() string\nFunctionOne(firstParam string, secondParam string) }\n</code></pre> examples/kt/SampleInterface.kt <pre><code>// This is a generated file\n//\n// If you would like to make any changes, please edit the source file instead.\n// run `plz genFile -- \"{SOURCE_FILE}\" -c:wings.json` upon completion.\n// Source: examples/input/sample_interface.wings\n\npackage kt\n\n// Just some interface\ninterface SampleInterface {\nfun functionTwo(): String\nfun functionOne(firstParam: String, secondParam: String): Unit\n}\n</code></pre> examples/ts/SampleInterface.ts <pre><code>// This is a generated file\n//\n// If you would like to make any changes, please edit the source file instead.\n// run `plz genFile -- \"{SOURCE_FILE}\" -c:wings.json` upon completion.\n// Source: examples/input/sample_interface.wings\n\nimport Emotion from './person/Emotion';\n\n// Just some interface\nexport default interface SampleInterface {\nfunctionTwo(): string;\nfunctionOne(firstParam: string, secondParam: string): void;\n}\n</code></pre>"},{"location":"license/","title":"MIT License","text":"<p>Copyright (c) 2019-2020 BinHong Lee</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"syntax/","title":"Syntax Keywords","text":"<p>Simple explanation on how the syntax works with wings. Rows that are unbounded and / or with undefined keywords will lead to an error being thrown.</p>"},{"location":"syntax/#lang-filepath","title":"<code>{lang}-filepath</code>","text":"<p>Basically the path location of where the generated file lives relative to where the build is ran (which if you use Please or Nimble as suggested, it will always be at the top level folder of this project - <code>wings/</code>).</p> <p>If the namespace for a specific language is not defined, the file for that language will not be generated.</p>"},{"location":"syntax/#lang-import","title":"<code>{lang}-import</code>","text":"<p>Usually the <code>include</code> or <code>import</code> statement required for some part of the file to work properly. (In this case, its mostly external classes or enums for custom typing.)</p>"},{"location":"syntax/#import","title":"<code>import</code>","text":"<p>Similar to the above but this is specific to <code>include</code> or <code>import</code> another <code>wings</code> file.</p>"},{"location":"syntax/#lang-implement","title":"<code>{lang}-implement</code>","text":"<p>In many occassion, your struct or object might be implementing a separate interface class. Use this to specify the class that it is implementing. (There is not support for this in <code>go</code> since it would already inherently associate your struct to the interface if you implemented all the functions and variables defined in the interface.)</p>"},{"location":"syntax/#lang-func","title":"<code>{lang}-func</code>","text":"<p>Specific functions for specific programming languages. Ideally, you should have a separate utility classes that do all the other operations. This is mostly designed to be used for defining functions in an interface that the struct / class is implementing.</p>"},{"location":"syntax/#_1","title":"<code>#</code>","text":"<p>Comments for struct (usually description). This comment will be carried forward and included in the generated file.</p>"},{"location":"syntax/#_2","title":"<code>//</code>","text":"<p>Comment in file. Unlike <code>#</code>, lines that begins with <code>//</code> will be ignored by the parser unless it is written inside the <code>{lang}Func()</code> where it would then be copied over to the generated file exactly the way it is. (Tabbing does not matter.)</p>"},{"location":"template/","title":"Template","text":"<p>This is for more advanced use case where you want your own way of formatting for the output files or if you use wings for languages that is not currently supported. Check out the examples/input/template folder for an example of how it works for currently supported languages (start from the json files).</p> <p>* indicates required field. Non-required fields will have its default value specified.</p>"},{"location":"template/#comment-str","title":"comment*: <code>str</code>","text":"<p>Language line prefix for comments (eg. <code>//</code> in TypeScript or <code>#</code> in Python).</p>"},{"location":"template/#filename-case","title":"filename*: <code>Case</code>","text":"<p>The Case / format in which the output filename should be in.</p>"},{"location":"template/#filetype-str","title":"filetype*: <code>str</code>","text":"<p>This is used for deduplication of language template files and also to be appended to the generated filename ending as filetype.</p>"},{"location":"template/#implementformat-str","title":"implementFormat: <code>str</code>","text":"<pre><code>default: \"{#IMPLEMENT}\"\n</code></pre> <p>The string in which is used in the specific language to declare that the current class extends or implements an existing different class.</p>"},{"location":"template/#importpath-obj","title":"importPath*: <code>obj</code>","text":""},{"location":"template/#format-str","title":"format: <code>str</code>","text":"<pre><code>default: \"{#IMPORT}\"\n</code></pre> <p>The format in which import path are written in.</p>"},{"location":"template/#separator-str","title":"separator: <code>str</code>","text":"<pre><code>default: '/'\n</code></pre> <p>The way files / folders are joined. Some programming languages uses '.' in import path instead of '/'.</p>"},{"location":"template/#pathtype-never-absolute-relative","title":"pathType*: <code>\"never\" || \"absolute\" || \"relative\"</code>","text":"<p>This is to define how the import path should be written for the imported files.</p>"},{"location":"template/#prefix-str","title":"prefix: <code>str</code>","text":"<pre><code>default: \"\"\n</code></pre> <p>Prefix for import path. Will be overwritten by the <code>prefix</code> value in the project config if already defined there.</p>"},{"location":"template/#level-int","title":"level*: <code>int</code>","text":"<p>The level of folder the import should run and stop at. <code>0</code> is the lowest possible number which refers to the file itself, <code>1</code> refers to the folder the file is in and so on.</p> <p>*Note: Only required when <code>pathType</code> is not set to <code>\"never\"</code></p>"},{"location":"template/#indentation-obj","title":"indentation: <code>obj</code>","text":""},{"location":"template/#spacing-str","title":"spacing: <code>str</code>","text":"<pre><code>default: \"\"\n</code></pre> <p>Define the \"tab\" width. This WOULD NOT replace the existing tabbing in your template files but rather is used to properly indent functions declared in the wings file.</p>"},{"location":"template/#preindent-bool","title":"preIndent: <code>bool</code>","text":"<pre><code>default: false\n</code></pre> <p>This is to define if the imported functions should be indented in the output file.</p>"},{"location":"template/#parseformat-str","title":"parseFormat: <code>str</code>","text":"<pre><code>default: \"\"\n</code></pre> <p>General fallback option for the more specific <code>targetParse</code> below if that's not defined.</p>"},{"location":"template/#templates-obj","title":"templates*: <code>obj</code>","text":""},{"location":"template/#struct-str","title":"struct*: <code>str</code>","text":"<p>Filepath to the struct template file.</p>"},{"location":"template/#enum-str","title":"enum*: <code>str</code>","text":"<p>Filepath to the enum template file.</p>"},{"location":"template/#types-obj","title":"types*: <code>obj[]</code>","text":""},{"location":"template/#wingstype-str","title":"wingsType*: <code>str</code>","text":"<p>Type to be parsed from wings file.</p>"},{"location":"template/#targettype-str","title":"targetType*: <code>str</code>","text":"<p>Generated type for output language.</p>"},{"location":"template/#targetinit-str","title":"targetInit: <code>str</code>","text":"<pre><code>default: \"\"\n</code></pre> <p>Initialization for target output type.</p>"},{"location":"template/#requiredimport-str","title":"requiredImport: <code>str</code>","text":"<pre><code>default: \"\"\n</code></pre> <p>Specific import that is needed to be added when this type is in use.</p>"},{"location":"tsUtil/","title":"index.ts","text":""},{"location":"tsUtil/#interface","title":"Interface","text":""},{"location":"tsUtil/#iwingsstruct","title":"<code>IWingsStruct</code>","text":"<p><code>toJsonKey</code></p> <p>Converts given variable names into their predefined JSON key (in the original <code>.struct</code> / <code>.enum</code> file).</p> Argument Type Description <code>key</code> <code>string</code> Variable name to be converted into JSON key."},{"location":"tsUtil/#class","title":"Class","text":""},{"location":"tsUtil/#wingsstructutil","title":"<code>WingsStructUtil</code>","text":"<p>Note: All functions are static functions.</p> <p><code>isIWingsStruct: arg is IWingsStruct</code></p> <p>Returns if the object provided in <code>arg</code> is an <code>IWingsStruct</code>.</p> Argument Type Description <code>arg</code> <code>any</code> Object to be tested. <p><code>stringify: string</code></p> <p>Returns a JSON in string format of the given object in <code>obj</code> .</p> Argument Type Description <code>obj</code> <code>any</code> Object to be stringified."}]}