{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"wings A simple cross language struct and enum file generator. (You might want to use a linter with this to clean up some trailing whitespaces and uneven tabbings.) Info Unsupported types are initialized as custom struct / classes unless specified otherwise. Nim date It is currently unsupported since I haven't figure out how to parse ISOString time properly from string in Nim. Run nimble genFile \"{filepath}\" or plz run //src/main:wings -- \"{filepath}\" to generate the files. Struct Input file: go-filepath examples/go/classroom kt-filepath examples/kt nim-filepath examples/nim py-filepath examples/py ts-filepath examples/ts ts-import People:./People import examples/emotion.enum.wings import examples/homework.struct.wings py-implement People ts-implement People # Student - Any person who is studying in a class Student { id int -1 name str cur_class str feeling Emotion Emotion.Meh is_active bool true year date graduation date homeworks []Homework something Map<str,str> } tsFunc( public addHomework(hw: Homework): void { this.Homeworks.push(hw); } ) Output files: examples/go/classroom/student.go /* * This is a generated file * * If you would like to make any changes, please edit the source file instead. * run `nimble genFile \"{SOURCE_FILE}\"` upon completion. * Source: examples/student.struct.wings */ package classroom import ( emotion \"github.com/binhonglee/wings/examples/go\" \"time\" ) // Student - Any person who is studying in a class type Student struct { ID int `json:\"id\"` Name string `json:\"name\"` CurClass string `json:\"cur_class\"` Feeling emotion . Emotion `json:\"feeling\"` IsActive bool `json:\"is_active\"` Year time . Time `json:\"year\"` Graduation time . Time `json:\"graduation\"` Homeworks [] Homework `json:\"homeworks\"` Something map [ string ] string `json:\"something\"` } // Students - An array of Student type Students [] Student examples/kt/Student.kt /* * This is a generated file * * If you would like to make any changes, please edit the source file instead. * run `nimble genFile \"{SOURCE_FILE}\"` upon completion. * Source: examples/student.struct.wings */ package kt import java.util.ArrayList import java.util.HashMap // Student - Any person who is studying in a class class Student { var ID : Int = - 1 var name : String = \"\" var curClass : String = \"\" var feeling : Emotion = Emotion . Meh var isActive : Boolean = true var year : Date = Date () var graduation : Date = Date () var homeworks : ArrayList < Homework > = ArrayList < Homework >() var something : HashMap < String , String > = HashMap < String , String >() fun toJsonKey ( key : string ): string { when ( key ) { \"ID\" -> return \"id\" \"name\" -> return \"name\" \"curClass\" -> return \"cur_class\" \"feeling\" -> return \"feeling\" \"isActive\" -> return \"is_active\" \"year\" -> return \"year\" \"graduation\" -> return \"graduation\" \"homeworks\" -> return \"homeworks\" \"something\" -> return \"something\" else -> return key } } } examples/nim/student.nim # This is a generated file # # If you would like to make any changes, please edit the source file instead. # run `nimble genFile \"{SOURCE_FILE}\"` upon completion. # Source: examples/student.struct.wings import json import . / homework import times import tables import . / emotion # Student - Any person who is studying in a class type Student * = object ID * : int name * : string curClass * : string feeling * : Emotion isActive * : bool year * : DateTime graduation * : DateTime homeworks * : seq [ Homework ] something * : Table [ string , string ] proc parse * ( student : var Student , data : string ): void = let jsonOutput = parseJson ( data ) student . ID = jsonOutput [ \"id\" ] . getInt () student . name = jsonOutput [ \"name\" ] . getStr () student . curClass = jsonOutput [ \"cur_class\" ] . getStr () student . feeling = newEmotion ( jsonOutput [ \"feeling\" ] . getStr ()) student . isActive = jsonOutput [ \"is_active\" ] . getBool () student . year = now () student . graduation = now () student . homeworks = jsonOutput [ \"homeworks\" ] . getElems () student . something = jsonOutput [ \"something\" ] . getElems () examples/py/student.py # This is a generated file # # If you would like to make any changes, please edit the source file instead. # run `nimble genFile \"{SOURCE_FILE}\"` upon completion. # Source: examples/student.struct.wings import json from datetime import date import examples.py.emotion import examples.py.homework # Student - Any person who is studying in a class class Student ( People ): id : int = - 1 name : str = \"\" cur_class : str = \"\" feeling : Emotion = Emotion . Meh is_active : bool = True year : date = date . today () graduation : date = date . today () homeworks : list = list () something : dict = {} def init ( self , data ): self = json . loads ( data ) examples/ts/Student.ts /* * This is a generated file * * If you would like to make any changes, please edit the source file instead. * run `nimble genFile \"{SOURCE_FILE}\"` upon completion. * Source: examples/student.struct.wings */ import Homework from './Homework' ; import People from './People' ; import Emotion from './person/Emotion' ; // Student - Any person who is studying in a class export default class Student implements People { [ key : string ] : any ; public ID : number = - 1 ; public name : string = '' ; public curClass : string = '' ; public feeling : Emotion = Emotion . Meh ; public isActive : boolean = true ; public year : Date = new Date (); public graduation : Date = new Date (); public homeworks : Homework [] = []; public something : Map < string , string > = new Map (); public init ( data : any ) : boolean { try { this . ID = data . id ; this . name = data . name ; this . curClass = data . cur_class ; this . feeling = data . feeling ; this . isActive = data . is_active ; this . year = new Date ( data . year ); this . graduation = new Date ( data . graduation ); if ( data . homeworks !== null ) { this . homeworks = data . homeworks ; } this . something = data . something ; } catch ( e ) { return false ; } return true ; } public toJsonKey ( key : string ) : string { switch ( key ) { case 'ID' : { return 'id' ; } case 'name' : { return 'name' ; } case 'curClass' : { return 'cur_class' ; } case 'feeling' : { return 'feeling' ; } case 'isActive' : { return 'is_active' ; } case 'year' : { return 'year' ; } case 'graduation' : { return 'graduation' ; } case 'homeworks' : { return 'homeworks' ; } case 'something' : { return 'something' ; } default : { return key ; } } } public addHomework ( hw : Homework ) : void { this . Homeworks . push ( hw ); } } The format of the fields goes from left to right in such order \"field name\", \"field type\", \"field JSON name\", and \"initialize as\" (optional, not used in Go and Nim). *Note: There is no gurranttee that \"initialize as\" field goes through a proper conversion or localization based on the targetted output languages so ideally you want to make sure it works with all versions of output that will be using it. Enum Input file: go-filepath examples/go kt-filepath examples/kt nim-filepath examples/nim py-filepath examples/py ts-filepath examples/ts/person Emotion { Accomplished Angry Annoyed Appalled Excited Exhausted FeelsGood Frustrated Happy Meh Sad Satisfied } examples/go/emotion.go /* * This is a generated file * * If you would like to make any changes, please edit the source file instead. * run `nimble genFile \"{SOURCE_FILE}\"` upon completion. * Source: examples/emotion.enum.wings */ package go type Emotion int const ( Accomplished = iota Angry Annoyed Appalled Excited Exhausted FeelsGood Frustrated Happy Meh Sad Satisfied ) examples/kt/Emotion.kt /* * This is a generated file * * If you would like to make any changes, please edit the source file instead. * run `nimble genFile \"{SOURCE_FILE}\"` upon completion. * Source: examples/emotion.enum.wings */ package kt enum class Emotion { Accomplished , Angry , Annoyed , Appalled , Excited , Exhausted , FeelsGood , Frustrated , Happy , Meh , Sad , Satisfied , } examples/nim/emotion.nim # This is a generated file # # If you would like to make any changes, please edit the source file instead. # run `nimble genFile \"{SOURCE_FILE}\"` upon completion. # Source: examples/emotion.enum.wings type Emotion * = enum Accomplished , Angry , Annoyed , Appalled , Excited , Exhausted , FeelsGood , Frustrated , Happy , Meh , Sad , Satisfied , examples/py/emotion.py # This is a generated file # # If you would like to make any changes, please edit the source file instead. # run `nimble genFile \"{SOURCE_FILE}\"` upon completion. # Source: examples/emotion.enum.wings from enum import Enum , auto class Emotion ( Enum ): Accomplished = auto () Angry = auto () Annoyed = auto () Appalled = auto () Excited = auto () Exhausted = auto () FeelsGood = auto () Frustrated = auto () Happy = auto () Meh = auto () Sad = auto () Satisfied = auto () examples/ts/person/Emotion.ts /* * This is a generated file * * If you would like to make any changes, please edit the source file instead. * run `nimble genFile \"{SOURCE_FILE}\"` upon completion. * Source: examples/emotion.enum.wings */ enum Emotion { Accomplished , Angry , Annoyed , Appalled , Excited , Exhausted , FeelsGood , Frustrated , Happy , Meh , Sad , Satisfied , } export default Emotion ; {lang}-filepath Basically the path location of where the generated file lives relative to where the build is ran (which if you use Please or Nimble as suggested, it will always be at the top level folder of this project - wings/ ). If the namespace for a specific language is not defined, the file for that language will not be generated. {lang}-import Usually the include or import statement required for some part of the file to work properly. (In this case, its mostly external classes or enums for custom typing.) import Similar with above but this is specific to include or import another wings file. {lang}-implement In many occassion, your struct or object might be implementing a separate interface class. Use this to specify the class that it is implementing. (There is not support for this in go since it would already inherently associate your struct to the interface if you implemented all the functions and variables defined in the interface.) # or // Comments for struct (usually description). {lang}Func Specific functions for specific programming languages. Ideally, you should have a separate utility classes that do all the other operations. This is mostly designed to be used for defining functions in an interface that the struct / class is implementing.","title":"Home"},{"location":"#wings","text":"A simple cross language struct and enum file generator. (You might want to use a linter with this to clean up some trailing whitespaces and uneven tabbings.) Info Unsupported types are initialized as custom struct / classes unless specified otherwise. Nim date It is currently unsupported since I haven't figure out how to parse ISOString time properly from string in Nim. Run nimble genFile \"{filepath}\" or plz run //src/main:wings -- \"{filepath}\" to generate the files.","title":"wings"},{"location":"#struct","text":"Input file: go-filepath examples/go/classroom kt-filepath examples/kt nim-filepath examples/nim py-filepath examples/py ts-filepath examples/ts ts-import People:./People import examples/emotion.enum.wings import examples/homework.struct.wings py-implement People ts-implement People # Student - Any person who is studying in a class Student { id int -1 name str cur_class str feeling Emotion Emotion.Meh is_active bool true year date graduation date homeworks []Homework something Map<str,str> } tsFunc( public addHomework(hw: Homework): void { this.Homeworks.push(hw); } ) Output files: examples/go/classroom/student.go /* * This is a generated file * * If you would like to make any changes, please edit the source file instead. * run `nimble genFile \"{SOURCE_FILE}\"` upon completion. * Source: examples/student.struct.wings */ package classroom import ( emotion \"github.com/binhonglee/wings/examples/go\" \"time\" ) // Student - Any person who is studying in a class type Student struct { ID int `json:\"id\"` Name string `json:\"name\"` CurClass string `json:\"cur_class\"` Feeling emotion . Emotion `json:\"feeling\"` IsActive bool `json:\"is_active\"` Year time . Time `json:\"year\"` Graduation time . Time `json:\"graduation\"` Homeworks [] Homework `json:\"homeworks\"` Something map [ string ] string `json:\"something\"` } // Students - An array of Student type Students [] Student examples/kt/Student.kt /* * This is a generated file * * If you would like to make any changes, please edit the source file instead. * run `nimble genFile \"{SOURCE_FILE}\"` upon completion. * Source: examples/student.struct.wings */ package kt import java.util.ArrayList import java.util.HashMap // Student - Any person who is studying in a class class Student { var ID : Int = - 1 var name : String = \"\" var curClass : String = \"\" var feeling : Emotion = Emotion . Meh var isActive : Boolean = true var year : Date = Date () var graduation : Date = Date () var homeworks : ArrayList < Homework > = ArrayList < Homework >() var something : HashMap < String , String > = HashMap < String , String >() fun toJsonKey ( key : string ): string { when ( key ) { \"ID\" -> return \"id\" \"name\" -> return \"name\" \"curClass\" -> return \"cur_class\" \"feeling\" -> return \"feeling\" \"isActive\" -> return \"is_active\" \"year\" -> return \"year\" \"graduation\" -> return \"graduation\" \"homeworks\" -> return \"homeworks\" \"something\" -> return \"something\" else -> return key } } } examples/nim/student.nim # This is a generated file # # If you would like to make any changes, please edit the source file instead. # run `nimble genFile \"{SOURCE_FILE}\"` upon completion. # Source: examples/student.struct.wings import json import . / homework import times import tables import . / emotion # Student - Any person who is studying in a class type Student * = object ID * : int name * : string curClass * : string feeling * : Emotion isActive * : bool year * : DateTime graduation * : DateTime homeworks * : seq [ Homework ] something * : Table [ string , string ] proc parse * ( student : var Student , data : string ): void = let jsonOutput = parseJson ( data ) student . ID = jsonOutput [ \"id\" ] . getInt () student . name = jsonOutput [ \"name\" ] . getStr () student . curClass = jsonOutput [ \"cur_class\" ] . getStr () student . feeling = newEmotion ( jsonOutput [ \"feeling\" ] . getStr ()) student . isActive = jsonOutput [ \"is_active\" ] . getBool () student . year = now () student . graduation = now () student . homeworks = jsonOutput [ \"homeworks\" ] . getElems () student . something = jsonOutput [ \"something\" ] . getElems () examples/py/student.py # This is a generated file # # If you would like to make any changes, please edit the source file instead. # run `nimble genFile \"{SOURCE_FILE}\"` upon completion. # Source: examples/student.struct.wings import json from datetime import date import examples.py.emotion import examples.py.homework # Student - Any person who is studying in a class class Student ( People ): id : int = - 1 name : str = \"\" cur_class : str = \"\" feeling : Emotion = Emotion . Meh is_active : bool = True year : date = date . today () graduation : date = date . today () homeworks : list = list () something : dict = {} def init ( self , data ): self = json . loads ( data ) examples/ts/Student.ts /* * This is a generated file * * If you would like to make any changes, please edit the source file instead. * run `nimble genFile \"{SOURCE_FILE}\"` upon completion. * Source: examples/student.struct.wings */ import Homework from './Homework' ; import People from './People' ; import Emotion from './person/Emotion' ; // Student - Any person who is studying in a class export default class Student implements People { [ key : string ] : any ; public ID : number = - 1 ; public name : string = '' ; public curClass : string = '' ; public feeling : Emotion = Emotion . Meh ; public isActive : boolean = true ; public year : Date = new Date (); public graduation : Date = new Date (); public homeworks : Homework [] = []; public something : Map < string , string > = new Map (); public init ( data : any ) : boolean { try { this . ID = data . id ; this . name = data . name ; this . curClass = data . cur_class ; this . feeling = data . feeling ; this . isActive = data . is_active ; this . year = new Date ( data . year ); this . graduation = new Date ( data . graduation ); if ( data . homeworks !== null ) { this . homeworks = data . homeworks ; } this . something = data . something ; } catch ( e ) { return false ; } return true ; } public toJsonKey ( key : string ) : string { switch ( key ) { case 'ID' : { return 'id' ; } case 'name' : { return 'name' ; } case 'curClass' : { return 'cur_class' ; } case 'feeling' : { return 'feeling' ; } case 'isActive' : { return 'is_active' ; } case 'year' : { return 'year' ; } case 'graduation' : { return 'graduation' ; } case 'homeworks' : { return 'homeworks' ; } case 'something' : { return 'something' ; } default : { return key ; } } } public addHomework ( hw : Homework ) : void { this . Homeworks . push ( hw ); } } The format of the fields goes from left to right in such order \"field name\", \"field type\", \"field JSON name\", and \"initialize as\" (optional, not used in Go and Nim). *Note: There is no gurranttee that \"initialize as\" field goes through a proper conversion or localization based on the targetted output languages so ideally you want to make sure it works with all versions of output that will be using it.","title":"Struct"},{"location":"#enum","text":"Input file: go-filepath examples/go kt-filepath examples/kt nim-filepath examples/nim py-filepath examples/py ts-filepath examples/ts/person Emotion { Accomplished Angry Annoyed Appalled Excited Exhausted FeelsGood Frustrated Happy Meh Sad Satisfied } examples/go/emotion.go /* * This is a generated file * * If you would like to make any changes, please edit the source file instead. * run `nimble genFile \"{SOURCE_FILE}\"` upon completion. * Source: examples/emotion.enum.wings */ package go type Emotion int const ( Accomplished = iota Angry Annoyed Appalled Excited Exhausted FeelsGood Frustrated Happy Meh Sad Satisfied ) examples/kt/Emotion.kt /* * This is a generated file * * If you would like to make any changes, please edit the source file instead. * run `nimble genFile \"{SOURCE_FILE}\"` upon completion. * Source: examples/emotion.enum.wings */ package kt enum class Emotion { Accomplished , Angry , Annoyed , Appalled , Excited , Exhausted , FeelsGood , Frustrated , Happy , Meh , Sad , Satisfied , } examples/nim/emotion.nim # This is a generated file # # If you would like to make any changes, please edit the source file instead. # run `nimble genFile \"{SOURCE_FILE}\"` upon completion. # Source: examples/emotion.enum.wings type Emotion * = enum Accomplished , Angry , Annoyed , Appalled , Excited , Exhausted , FeelsGood , Frustrated , Happy , Meh , Sad , Satisfied , examples/py/emotion.py # This is a generated file # # If you would like to make any changes, please edit the source file instead. # run `nimble genFile \"{SOURCE_FILE}\"` upon completion. # Source: examples/emotion.enum.wings from enum import Enum , auto class Emotion ( Enum ): Accomplished = auto () Angry = auto () Annoyed = auto () Appalled = auto () Excited = auto () Exhausted = auto () FeelsGood = auto () Frustrated = auto () Happy = auto () Meh = auto () Sad = auto () Satisfied = auto () examples/ts/person/Emotion.ts /* * This is a generated file * * If you would like to make any changes, please edit the source file instead. * run `nimble genFile \"{SOURCE_FILE}\"` upon completion. * Source: examples/emotion.enum.wings */ enum Emotion { Accomplished , Angry , Annoyed , Appalled , Excited , Exhausted , FeelsGood , Frustrated , Happy , Meh , Sad , Satisfied , } export default Emotion ;","title":"Enum"},{"location":"#lang-filepath","text":"Basically the path location of where the generated file lives relative to where the build is ran (which if you use Please or Nimble as suggested, it will always be at the top level folder of this project - wings/ ). If the namespace for a specific language is not defined, the file for that language will not be generated.","title":"{lang}-filepath"},{"location":"#lang-import","text":"Usually the include or import statement required for some part of the file to work properly. (In this case, its mostly external classes or enums for custom typing.)","title":"{lang}-import"},{"location":"#import","text":"Similar with above but this is specific to include or import another wings file.","title":"import"},{"location":"#lang-implement","text":"In many occassion, your struct or object might be implementing a separate interface class. Use this to specify the class that it is implementing. (There is not support for this in go since it would already inherently associate your struct to the interface if you implemented all the functions and variables defined in the interface.)","title":"{lang}-implement"},{"location":"#or","text":"Comments for struct (usually description).","title":"# or //"},{"location":"#langfunc","text":"Specific functions for specific programming languages. Ideally, you should have a separate utility classes that do all the other operations. This is mostly designed to be used for defining functions in an interface that the struct / class is implementing.","title":"{lang}Func"},{"location":"license/","text":"MIT License Copyright (c) 2019 BinHong Lee Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"license/#mit-license","text":"Copyright (c) 2019 BinHong Lee Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"MIT License"},{"location":"main/wings/","text":"wings.nim Imports os createDir fileExists joinPath paramCount paramStr parentDir setCurrentDir strutils startsWith endsWith tables wingspkg/core wingspkg/util/config wingspkg/util/log Functions toFile: void Writing the generated output onto the files. Argument Type Description path string Fullpath (including the filename) of the destination file. content string Content to write into the specified file. init: void Just a handler to go through each command line argument (and try to open them as a file). Argument Type Description count int Number of command line arguments provided.","title":"wings.nim"},{"location":"main/wings/#wingsnim","text":"","title":"wings.nim"},{"location":"main/wings/#imports","text":"os createDir fileExists joinPath paramCount paramStr parentDir setCurrentDir strutils startsWith endsWith tables wingspkg/core wingspkg/util/config wingspkg/util/log","title":"Imports"},{"location":"main/wings/#functions","text":"","title":"Functions"},{"location":"main/wings/#tofile-void","text":"Writing the generated output onto the files. Argument Type Description path string Fullpath (including the filename) of the destination file. content string Content to write into the specified file.","title":"toFile: void"},{"location":"main/wings/#init-void","text":"Just a handler to go through each command line argument (and try to open them as a file). Argument Type Description count int Number of command line arguments provided.","title":"init: void"},{"location":"main/wingspkg/core/","text":"core.nim Imports strutils capitalizeAscii contains endsWith join normalize parseEnum removeSuffix split splitWhitespace tables lib/wenum lib/wstruct lib/winterface lib/wiutil util/config util/log Functions (DEPRECATED) fromFile: Table[string, string] Entry point to the file. It gets the file to read and returns a table of output to be written. Argument Type Description filename string Filename of the file to read from. header string Customized header. fromFiles: Table[string, Table[string, string]] Entry point to the file. It gets all the files to read and returns a table of output to be written. Argument Type Description filenames seq[string] Filename of the files to read from. config Config User config.","title":"core.nim"},{"location":"main/wingspkg/core/#corenim","text":"","title":"core.nim"},{"location":"main/wingspkg/core/#imports","text":"strutils capitalizeAscii contains endsWith join normalize parseEnum removeSuffix split splitWhitespace tables lib/wenum lib/wstruct lib/winterface lib/wiutil util/config util/log","title":"Imports"},{"location":"main/wingspkg/core/#functions","text":"","title":"Functions"},{"location":"main/wingspkg/core/#deprecated-fromfile-tablestring-string","text":"Entry point to the file. It gets the file to read and returns a table of output to be written. Argument Type Description filename string Filename of the file to read from. header string Customized header.","title":"(DEPRECATED) fromFile: Table[string, string]"},{"location":"main/wingspkg/core/#fromfiles-tablestring-tablestring-string","text":"Entry point to the file. It gets all the files to read and returns a table of output to be written. Argument Type Description filenames seq[string] Filename of the files to read from. config Config User config.","title":"fromFiles: Table[string, Table[string, string]]"},{"location":"main/wingspkg/plz/","text":"plz.nim This was some early draft I wrote that I never got around to test if they actually works. Imports strutils indent Functions goPlzBuild: string Generate the go_library() declaration for please build file. Argument Type Description name string dep seq[string] visibility seq[string]","title":"plz.nim"},{"location":"main/wingspkg/plz/#plznim","text":"This was some early draft I wrote that I never got around to test if they actually works.","title":"plz.nim"},{"location":"main/wingspkg/plz/#imports","text":"strutils indent","title":"Imports"},{"location":"main/wingspkg/plz/#functions","text":"","title":"Functions"},{"location":"main/wingspkg/plz/#goplzbuild-string","text":"Generate the go_library() declaration for please build file. Argument Type Description name string dep seq[string] visibility seq[string]","title":"goPlzBuild: string"},{"location":"main/wingspkg/lang/go/","text":"go.nim Imports strutils capitalizeAscii contains endsWith indent removePrefix removeSuffix replace split startsWith toLowerAscii unindent sets tables getOrDefault ../util/varname camelCase ../util/log ../lib/wstruct ../lib/wenum Functions genWEnum: string Converts the given WEnum object to an enum file. Argument Type Description wenum WEnum Object with all information needed. genWStruct: string Converts the given WStruct object to a struct file. Argument Type Description wstruct WStruct Object with all information needed.","title":"Go"},{"location":"main/wingspkg/lang/go/#gonim","text":"","title":"go.nim"},{"location":"main/wingspkg/lang/go/#imports","text":"strutils capitalizeAscii contains endsWith indent removePrefix removeSuffix replace split startsWith toLowerAscii unindent sets tables getOrDefault ../util/varname camelCase ../util/log ../lib/wstruct ../lib/wenum","title":"Imports"},{"location":"main/wingspkg/lang/go/#functions","text":"","title":"Functions"},{"location":"main/wingspkg/lang/go/#genwenum-string","text":"Converts the given WEnum object to an enum file. Argument Type Description wenum WEnum Object with all information needed.","title":"genWEnum: string"},{"location":"main/wingspkg/lang/go/#genwstruct-string","text":"Converts the given WStruct object to a struct file. Argument Type Description wstruct WStruct Object with all information needed.","title":"genWStruct: string"},{"location":"main/wingspkg/lang/kt/","text":"ts.nim Imports strutils contains endsWith indent removePrefix removeSuffix replace split startsWith tables getOrDefault ../util/varname camelCase ../util/log ../lib/wstruct ../lib/wenum Functions public genWEnum: string Converts the given WEnum object to an enum file. Argument Type Description wenum WEnum Object with all information needed. genWStruct: string Converts the given WStruct object to a struct file. Argument Type Description wstruct WStruct Object with all information needed.","title":"Kotlin"},{"location":"main/wingspkg/lang/kt/#tsnim","text":"","title":"ts.nim"},{"location":"main/wingspkg/lang/kt/#imports","text":"strutils contains endsWith indent removePrefix removeSuffix replace split startsWith tables getOrDefault ../util/varname camelCase ../util/log ../lib/wstruct ../lib/wenum","title":"Imports"},{"location":"main/wingspkg/lang/kt/#functions","text":"","title":"Functions"},{"location":"main/wingspkg/lang/kt/#public","text":"","title":"public"},{"location":"main/wingspkg/lang/kt/#genwenum-string","text":"Converts the given WEnum object to an enum file. Argument Type Description wenum WEnum Object with all information needed.","title":"genWEnum: string"},{"location":"main/wingspkg/lang/kt/#genwstruct-string","text":"Converts the given WStruct object to a struct file. Argument Type Description wstruct WStruct Object with all information needed.","title":"genWStruct: string"},{"location":"main/wingspkg/lang/nim/","text":"nim.nim Imports strutils capitalizeAscii contains endsWith indent normalize removePrefix removeSuffix replace split startsWith tables getOrDefault ../util/varname camelCase ../util/log ../lib/wstruct ../lib/wenum Functions public genWEnum: string Converts the given WEnum object to an enum file. Argument Type Description wenum WEnum Object with all information needed. genWStruct: string Converts the given WStruct object to a struct file. Argument Type Description wstruct WStruct Object with all information needed.","title":"Nim"},{"location":"main/wingspkg/lang/nim/#nimnim","text":"","title":"nim.nim"},{"location":"main/wingspkg/lang/nim/#imports","text":"strutils capitalizeAscii contains endsWith indent normalize removePrefix removeSuffix replace split startsWith tables getOrDefault ../util/varname camelCase ../util/log ../lib/wstruct ../lib/wenum","title":"Imports"},{"location":"main/wingspkg/lang/nim/#functions","text":"","title":"Functions"},{"location":"main/wingspkg/lang/nim/#public","text":"","title":"public"},{"location":"main/wingspkg/lang/nim/#genwenum-string","text":"Converts the given WEnum object to an enum file. Argument Type Description wenum WEnum Object with all information needed.","title":"genWEnum: string"},{"location":"main/wingspkg/lang/nim/#genwstruct-string","text":"Converts the given WStruct object to a struct file. Argument Type Description wstruct WStruct Object with all information needed.","title":"genWStruct: string"},{"location":"main/wingspkg/lang/py/","text":"py.nim Imports strutils capitalizeAscii endsWith indent replace split startsWith tables getOrDefault ../lib/wstruct ../lib/wenum Functions public genWEnum: string Converts the given WEnum object to an enum file. Argument Type Description wenum WEnum Object with all information needed. genWStruct: string Converts the given WStruct object to a struct file. Argument Type Description wstruct WStruct Object with all information needed. private types: string Converts wings type to Python type. Argument Type Description name string The defined wings type to be converted. typeInit: string Provides the default to be initialzed based on its wings type. Argument Type Description name string The defined wings type. wEnumFile: string Generate the Python file with the given info. Argument Type Description name string Name of the enum. values seq[string] Values of the enum. wStructFile: string Generate the Python file with the given info. Argument Type Description name string Name of the struct. imports seq[string] File imports fields seq[string] Struct fields. functions string Additional self defined functions. implement string An external interface to implement.","title":"Python"},{"location":"main/wingspkg/lang/py/#pynim","text":"","title":"py.nim"},{"location":"main/wingspkg/lang/py/#imports","text":"strutils capitalizeAscii endsWith indent replace split startsWith tables getOrDefault ../lib/wstruct ../lib/wenum","title":"Imports"},{"location":"main/wingspkg/lang/py/#functions","text":"","title":"Functions"},{"location":"main/wingspkg/lang/py/#public","text":"","title":"public"},{"location":"main/wingspkg/lang/py/#genwenum-string","text":"Converts the given WEnum object to an enum file. Argument Type Description wenum WEnum Object with all information needed.","title":"genWEnum: string"},{"location":"main/wingspkg/lang/py/#genwstruct-string","text":"Converts the given WStruct object to a struct file. Argument Type Description wstruct WStruct Object with all information needed.","title":"genWStruct: string"},{"location":"main/wingspkg/lang/py/#private","text":"","title":"private"},{"location":"main/wingspkg/lang/py/#types-string","text":"Converts wings type to Python type. Argument Type Description name string The defined wings type to be converted.","title":"types: string"},{"location":"main/wingspkg/lang/py/#typeinit-string","text":"Provides the default to be initialzed based on its wings type. Argument Type Description name string The defined wings type.","title":"typeInit: string"},{"location":"main/wingspkg/lang/py/#wenumfile-string","text":"Generate the Python file with the given info. Argument Type Description name string Name of the enum. values seq[string] Values of the enum.","title":"wEnumFile: string"},{"location":"main/wingspkg/lang/py/#wstructfile-string","text":"Generate the Python file with the given info. Argument Type Description name string Name of the struct. imports seq[string] File imports fields seq[string] Struct fields. functions string Additional self defined functions. implement string An external interface to implement.","title":"wStructFile: string"},{"location":"main/wingspkg/lang/ts/","text":"ts.nim Imports strutils contains endsWith indent intToStr removePrefix removeSuffix replace split startsWith tables getOrDefault ../util/varname camelCase ../util/log ../lib/wstruct ../lib/wenum Functions public genWEnum: string Converts the given WEnum object to an enum file. Argument Type Description wenum WEnum Object with all information needed. genWStruct: string Converts the given WStruct object to a struct file. Argument Type Description wstruct WStruct Object with all information needed. private types: string Converts wings type to TypeScript type. Argument Type Description name string The defined wings type. typeAssign: string Assign the content the way it should be based on the name (type). Argument Type Description name string The defined wings type. content string Content to be assigned. typeInit: string Provides the default to be initialzed based on its wings type. Argument Type Description name string The defined wings type. wEnumFile: string Generate the TypeScript file with the given info. Name Type Description name string Name of the enum. values seq[string] Values of the enum. wStructFile: string Generate the TypeScript file with the given info. Name Type Description name string Name of the struct. imports seq[string] File imports fields seq[string] Struct fields. functions string Additional self defined functions. implement string An external interface to implement.","title":"TypeScript"},{"location":"main/wingspkg/lang/ts/#tsnim","text":"","title":"ts.nim"},{"location":"main/wingspkg/lang/ts/#imports","text":"strutils contains endsWith indent intToStr removePrefix removeSuffix replace split startsWith tables getOrDefault ../util/varname camelCase ../util/log ../lib/wstruct ../lib/wenum","title":"Imports"},{"location":"main/wingspkg/lang/ts/#functions","text":"","title":"Functions"},{"location":"main/wingspkg/lang/ts/#public","text":"","title":"public"},{"location":"main/wingspkg/lang/ts/#genwenum-string","text":"Converts the given WEnum object to an enum file. Argument Type Description wenum WEnum Object with all information needed.","title":"genWEnum: string"},{"location":"main/wingspkg/lang/ts/#genwstruct-string","text":"Converts the given WStruct object to a struct file. Argument Type Description wstruct WStruct Object with all information needed.","title":"genWStruct: string"},{"location":"main/wingspkg/lang/ts/#private","text":"","title":"private"},{"location":"main/wingspkg/lang/ts/#types-string","text":"Converts wings type to TypeScript type. Argument Type Description name string The defined wings type.","title":"types: string"},{"location":"main/wingspkg/lang/ts/#typeassign-string","text":"Assign the content the way it should be based on the name (type). Argument Type Description name string The defined wings type. content string Content to be assigned.","title":"typeAssign: string"},{"location":"main/wingspkg/lang/ts/#typeinit-string","text":"Provides the default to be initialzed based on its wings type. Argument Type Description name string The defined wings type.","title":"typeInit: string"},{"location":"main/wingspkg/lang/ts/#wenumfile-string","text":"Generate the TypeScript file with the given info. Name Type Description name string Name of the enum. values seq[string] Values of the enum.","title":"wEnumFile: string"},{"location":"main/wingspkg/lang/ts/#wstructfile-string","text":"Generate the TypeScript file with the given info. Name Type Description name string Name of the struct. imports seq[string] File imports fields seq[string] Struct fields. functions string Additional self defined functions. implement string An external interface to implement.","title":"wStructFile: string"},{"location":"main/wingspkg/lib/wenum/","text":"wenum.nim Imports strutils splitWhitespace tables ../util/config ../util/log ./winterface IWings Type WEnum: ref object of [IWings](./winterface) Argument Type Description values seq[string] All the enum values. Functions newWEnum: WEnum Returns an empty initialized WEnum . parseFile: bool Parse the WEnum from the given file to the given WEnum object. Argument Type Description wenum WEnum Target WEnum to parse the data from the file to. file File Source file to parse data from. filename string Name of source file. package Table[string, string] Package of the result file should be in. config Config User config.","title":"wenum.nim"},{"location":"main/wingspkg/lib/wenum/#wenumnim","text":"","title":"wenum.nim"},{"location":"main/wingspkg/lib/wenum/#imports","text":"strutils splitWhitespace tables ../util/config ../util/log ./winterface IWings","title":"Imports"},{"location":"main/wingspkg/lib/wenum/#type","text":"","title":"Type"},{"location":"main/wingspkg/lib/wenum/#wenum-ref-object-of-iwingswinterface","text":"Argument Type Description values seq[string] All the enum values.","title":"WEnum: ref object of [IWings](./winterface)"},{"location":"main/wingspkg/lib/wenum/#functions","text":"","title":"Functions"},{"location":"main/wingspkg/lib/wenum/#newwenum-wenum","text":"Returns an empty initialized WEnum .","title":"newWEnum: WEnum"},{"location":"main/wingspkg/lib/wenum/#parsefile-bool","text":"Parse the WEnum from the given file to the given WEnum object. Argument Type Description wenum WEnum Target WEnum to parse the data from the file to. file File Source file to parse data from. filename string Name of source file. package Table[string, string] Package of the result file should be in. config Config User config.","title":"parseFile: bool"},{"location":"main/wingspkg/lib/winterface/","text":"winterface.nim Imports sets tables Type IWings: ref object of RootObj Argument Type Description name string Struct type name. filename string Filename of the source wings file. dependencies seq[string] External wings files imported. filepath Table[string, string] Map of filetype and each of its package. imports Table[string, seq[string]] Map of filetype and a sequence of their import(s). Functions fulfillDependency: bool Fulfill the required dependency (after dependant file is generated). Argument Type Description iwings IWings Wings interface to fulfill dependency. dependency string Dependency to be fulfilled. imports Table[string, string] Filepaths of the generated files to be added as import.","title":"winterface.nim"},{"location":"main/wingspkg/lib/winterface/#winterfacenim","text":"","title":"winterface.nim"},{"location":"main/wingspkg/lib/winterface/#imports","text":"sets tables","title":"Imports"},{"location":"main/wingspkg/lib/winterface/#type","text":"","title":"Type"},{"location":"main/wingspkg/lib/winterface/#iwings-ref-object-of-rootobj","text":"Argument Type Description name string Struct type name. filename string Filename of the source wings file. dependencies seq[string] External wings files imported. filepath Table[string, string] Map of filetype and each of its package. imports Table[string, seq[string]] Map of filetype and a sequence of their import(s).","title":"IWings: ref object of RootObj"},{"location":"main/wingspkg/lib/winterface/#functions","text":"","title":"Functions"},{"location":"main/wingspkg/lib/winterface/#fulfilldependency-bool","text":"Fulfill the required dependency (after dependant file is generated). Argument Type Description iwings IWings Wings interface to fulfill dependency. dependency string Dependency to be fulfilled. imports Table[string, string] Filepaths of the generated files to be added as import.","title":"fulfillDependency: bool"},{"location":"main/wingspkg/lib/wiutil/","text":"wiutil.nim Imports tables ./winterface ./wenum ./wstruct ../util/filename ../util/header ../util/config ../lang/go ../lang/kt ../lang/nim ../lang/py ../lang/ts ../util/log Functions genWEnumFiles: Table[string, string] Generate the enum files for all the natively supported output types. Argument Type Description wenum WEnum WEnum object source for the out files. config Config User config. genWStructFiles: Table[string, string] Generate the struct files for all the natively supported output types. Argument Type Description wstruct WStruct WStruct object source for the out files. config Config User config. genFiles: Table[string, string] Generate the corresponding files (WEnum or WStruct) for all the natively supported output types. Argument Type Description this IWings IWings object source for the out files. config Config User config.","title":"wiutil.nim"},{"location":"main/wingspkg/lib/wiutil/#wiutilnim","text":"","title":"wiutil.nim"},{"location":"main/wingspkg/lib/wiutil/#imports","text":"tables ./winterface ./wenum ./wstruct ../util/filename ../util/header ../util/config ../lang/go ../lang/kt ../lang/nim ../lang/py ../lang/ts ../util/log","title":"Imports"},{"location":"main/wingspkg/lib/wiutil/#functions","text":"","title":"Functions"},{"location":"main/wingspkg/lib/wiutil/#genwenumfiles-tablestring-string","text":"Generate the enum files for all the natively supported output types. Argument Type Description wenum WEnum WEnum object source for the out files. config Config User config.","title":"genWEnumFiles: Table[string, string]"},{"location":"main/wingspkg/lib/wiutil/#genwstructfiles-tablestring-string","text":"Generate the struct files for all the natively supported output types. Argument Type Description wstruct WStruct WStruct object source for the out files. config Config User config.","title":"genWStructFiles: Table[string, string]"},{"location":"main/wingspkg/lib/wiutil/#genfiles-tablestring-string","text":"Generate the corresponding files (WEnum or WStruct) for all the natively supported output types. Argument Type Description this IWings IWings object source for the out files. config Config User config.","title":"genFiles: Table[string, string]"},{"location":"main/wingspkg/lib/wstruct/","text":"wstruct.nim Imports strutils contains endsWith join removeSuffix split splitWhitespace sequtils foldr sets tables ../util/config ../util/log ./winterface IWings Type WStruct: ref object of [IWings](./winterface) Argument Type Description comment string Struct type comment. fields seq[string] All the struct fields. function Table[string, string] Map of filetype and each of its function. Functions newWStruct: WStruct Returns an empty initialized WStruct . parseFile: bool Parse the WStruct from the given file to the given WStruct object. Argument Type Description wstruct WStruct Target WStruct to parse the data from the file to. file File Source file to parse data from. filename string Name of source file. filepath Table[string, string] Filepath of the result file should be in. config Config User config.","title":"wstruct.nim"},{"location":"main/wingspkg/lib/wstruct/#wstructnim","text":"","title":"wstruct.nim"},{"location":"main/wingspkg/lib/wstruct/#imports","text":"strutils contains endsWith join removeSuffix split splitWhitespace sequtils foldr sets tables ../util/config ../util/log ./winterface IWings","title":"Imports"},{"location":"main/wingspkg/lib/wstruct/#type","text":"","title":"Type"},{"location":"main/wingspkg/lib/wstruct/#wstruct-ref-object-of-iwingswinterface","text":"Argument Type Description comment string Struct type comment. fields seq[string] All the struct fields. function Table[string, string] Map of filetype and each of its function.","title":"WStruct: ref object of [IWings](./winterface)"},{"location":"main/wingspkg/lib/wstruct/#functions","text":"","title":"Functions"},{"location":"main/wingspkg/lib/wstruct/#newwstruct-wstruct","text":"Returns an empty initialized WStruct .","title":"newWStruct: WStruct"},{"location":"main/wingspkg/lib/wstruct/#parsefile-bool","text":"Parse the WStruct from the given file to the given WStruct object. Argument Type Description wstruct WStruct Target WStruct to parse the data from the file to. file File Source file to parse data from. filename string Name of source file. filepath Table[string, string] Filepath of the result file should be in. config Config User config.","title":"parseFile: bool"},{"location":"main/wingspkg/util/config/","text":"config.nim Imports json os fileExists getCurrentDir lastPathPart parentDir strutils join tables ./log Variable Name Type Description CALLER_DIR string The directory where the program is initiated. Type Config: object Argument Type Description header string Header comment. prefixes Table[string, string] Map of language to import prefix (only go for now). tabbing int Space count for tabbing (not currently used). outputRootDirs seq[string] Header comment. Functions newConfig: Config Create a config to be used. Argument Type Description header string Header comment. prefixes Table[string, string] Map of language to import prefix (only go for now). tabbing int Space count for tabbing (not currently used). outputRootDirs seq[string] Header comment. parse: Config Parse the given config file in the path. Argument Type Description filename string Filename of the config file to be parsed.","title":"config.nim"},{"location":"main/wingspkg/util/config/#confignim","text":"","title":"config.nim"},{"location":"main/wingspkg/util/config/#imports","text":"json os fileExists getCurrentDir lastPathPart parentDir strutils join tables ./log","title":"Imports"},{"location":"main/wingspkg/util/config/#variable","text":"Name Type Description CALLER_DIR string The directory where the program is initiated.","title":"Variable"},{"location":"main/wingspkg/util/config/#type","text":"","title":"Type"},{"location":"main/wingspkg/util/config/#config-object","text":"Argument Type Description header string Header comment. prefixes Table[string, string] Map of language to import prefix (only go for now). tabbing int Space count for tabbing (not currently used). outputRootDirs seq[string] Header comment.","title":"Config: object"},{"location":"main/wingspkg/util/config/#functions","text":"","title":"Functions"},{"location":"main/wingspkg/util/config/#newconfig-config","text":"Create a config to be used. Argument Type Description header string Header comment. prefixes Table[string, string] Map of language to import prefix (only go for now). tabbing int Space count for tabbing (not currently used). outputRootDirs seq[string] Header comment.","title":"newConfig: Config"},{"location":"main/wingspkg/util/config/#parse-config","text":"Parse the given config file in the path. Argument Type Description filename string Filename of the config file to be parsed.","title":"parse: Config"},{"location":"main/wingspkg/util/filename/","text":"filename.nim Imports os unixToNativePath tables strutils capitalizeAscii join split sequtils foldr ./log Functions filename: Table[string, string] Generate the filename map of filetype to filename. Argument Type Description filename string Original filename. filepath Table[string, string] Map of filetype to its output filepath. customJoin Table[string, char] Path joiner char. filetypeSuffix bool If filetype suffix should be appended to filename. useNativePath bool Turn unix path to native path (especially for Windows). outputFilename: Table[string, string] Generate the filename map of filetype to filename for output path. Argument Type Description filename string Original filename. filepath Table[string, string] Map of filetype to its output filepath. importFilename: Table[string, string] Generate the filename map of filetype to filename for import use. Argument Type Description filename string Original filename. filepath Table[string, string] Map of filetype to its output filepath. callerFilepath Table[string, string] Map of filetype to source filepath importing it. prefixes Table[string, string] Map of filetype to its import prefix.","title":"filename.nim"},{"location":"main/wingspkg/util/filename/#filenamenim","text":"","title":"filename.nim"},{"location":"main/wingspkg/util/filename/#imports","text":"os unixToNativePath tables strutils capitalizeAscii join split sequtils foldr ./log","title":"Imports"},{"location":"main/wingspkg/util/filename/#functions","text":"","title":"Functions"},{"location":"main/wingspkg/util/filename/#filename-tablestring-string","text":"Generate the filename map of filetype to filename. Argument Type Description filename string Original filename. filepath Table[string, string] Map of filetype to its output filepath. customJoin Table[string, char] Path joiner char. filetypeSuffix bool If filetype suffix should be appended to filename. useNativePath bool Turn unix path to native path (especially for Windows).","title":"filename: Table[string, string]"},{"location":"main/wingspkg/util/filename/#outputfilename-tablestring-string","text":"Generate the filename map of filetype to filename for output path. Argument Type Description filename string Original filename. filepath Table[string, string] Map of filetype to its output filepath.","title":"outputFilename: Table[string, string]"},{"location":"main/wingspkg/util/filename/#importfilename-tablestring-string","text":"Generate the filename map of filetype to filename for import use. Argument Type Description filename string Original filename. filepath Table[string, string] Map of filetype to its output filepath. callerFilepath Table[string, string] Map of filetype to source filepath importing it. prefixes Table[string, string] Map of filetype to its import prefix.","title":"importFilename: Table[string, string]"},{"location":"main/wingspkg/util/header/","text":"header.nim Imports strutils indent Functions genHeader: string Returns a string of a header generated based on given expected output filetype (since different programming languages have different way of writing comments). Note: There will always be a line at the end of the header pointing to the source file. Argument Type Description filetype string Target programming languages for the header. source string The source file . text (Optional) string Personalized header text.","title":"header.nim"},{"location":"main/wingspkg/util/header/#headernim","text":"","title":"header.nim"},{"location":"main/wingspkg/util/header/#imports","text":"strutils indent","title":"Imports"},{"location":"main/wingspkg/util/header/#functions","text":"","title":"Functions"},{"location":"main/wingspkg/util/header/#genheader-string","text":"Returns a string of a header generated based on given expected output filetype (since different programming languages have different way of writing comments). Note: There will always be a line at the end of the header pointing to the source file. Argument Type Description filetype string Target programming languages for the header. source string The source file . text (Optional) string Personalized header text.","title":"genHeader: string"},{"location":"main/wingspkg/util/log/","text":"log.nim Imports strutils indent terminal Type GenericException: object of Exception AlertLevel: enum Name Value FATAL 0 ERROR 1 SUCCESS 2 DEPRECATED 3 WARNING 4 INFO 5 Variable Name Type Description LEVEL AlertLevel Global alert level (set from config). Functions LOG: void Log message (and possibly throw error). Argument Type Description level AlertLevel Level of alert ( FATAL would throw exception). message string Logging message. exception typedesc Exception to be thrown (if the level is FATAL ). setLevel: void Setter for LEVEL . Argument Type Description level AlertLevel Set LEVEL to this given level.","title":"log.nim"},{"location":"main/wingspkg/util/log/#lognim","text":"","title":"log.nim"},{"location":"main/wingspkg/util/log/#imports","text":"strutils indent terminal","title":"Imports"},{"location":"main/wingspkg/util/log/#type","text":"","title":"Type"},{"location":"main/wingspkg/util/log/#genericexception-object-of-exception","text":"","title":"GenericException: object of Exception"},{"location":"main/wingspkg/util/log/#alertlevel-enum","text":"Name Value FATAL 0 ERROR 1 SUCCESS 2 DEPRECATED 3 WARNING 4 INFO 5","title":"AlertLevel: enum"},{"location":"main/wingspkg/util/log/#variable","text":"Name Type Description LEVEL AlertLevel Global alert level (set from config).","title":"Variable"},{"location":"main/wingspkg/util/log/#functions","text":"","title":"Functions"},{"location":"main/wingspkg/util/log/#log-void","text":"Log message (and possibly throw error). Argument Type Description level AlertLevel Level of alert ( FATAL would throw exception). message string Logging message. exception typedesc Exception to be thrown (if the level is FATAL ).","title":"LOG: void"},{"location":"main/wingspkg/util/log/#setlevel-void","text":"Setter for LEVEL . Argument Type Description level AlertLevel Set LEVEL to this given level.","title":"setLevel: void"},{"location":"main/wingspkg/util/varname/","text":"varname.nim Imports strutils capitalizeAscii split sequtils foldr Functions public camelCase: string Converts the input string to camelCase. Argument Type Description variable string String to be converted to camelCase.","title":"varname.nim"},{"location":"main/wingspkg/util/varname/#varnamenim","text":"","title":"varname.nim"},{"location":"main/wingspkg/util/varname/#imports","text":"strutils capitalizeAscii split sequtils foldr","title":"Imports"},{"location":"main/wingspkg/util/varname/#functions","text":"","title":"Functions"},{"location":"main/wingspkg/util/varname/#public","text":"","title":"public"},{"location":"main/wingspkg/util/varname/#camelcase-string","text":"Converts the input string to camelCase. Argument Type Description variable string String to be converted to camelCase.","title":"camelCase: string"},{"location":"tsUtil/","text":"index.ts Interface IWingsStruct toJsonKey Converts given variable names into their predefined JSON key (in the original .struct / .enum file). Argument Type Description key string Variable name to be converted into JSON key. Class WingsStructUtil Note: All functions are static functions. public isIWingsStruct: arg is IWingsStruct Returns if the object provided in arg is an IWingsStruct . Argument Type Description arg any Object to be tested. stringify: string Returns a JSON in string format of the given object in obj . Argument Type Description obj any Object to be stringified. private valString: string Turns the given val into its appropriate string format to be included as part of the JSON output (for stringify() ). Argument Type Description val any Value to be turned into a string . wrap: string Wrap and return the given string with a double quote around it. Argument Type Description toWrap string String to be wrapped.","title":"index.ts"},{"location":"tsUtil/#indexts","text":"","title":"index.ts"},{"location":"tsUtil/#interface","text":"","title":"Interface"},{"location":"tsUtil/#iwingsstruct","text":"toJsonKey Converts given variable names into their predefined JSON key (in the original .struct / .enum file). Argument Type Description key string Variable name to be converted into JSON key.","title":"IWingsStruct"},{"location":"tsUtil/#class","text":"","title":"Class"},{"location":"tsUtil/#wingsstructutil","text":"Note: All functions are static functions.","title":"WingsStructUtil"},{"location":"tsUtil/#public","text":"isIWingsStruct: arg is IWingsStruct Returns if the object provided in arg is an IWingsStruct . Argument Type Description arg any Object to be tested. stringify: string Returns a JSON in string format of the given object in obj . Argument Type Description obj any Object to be stringified.","title":"public"},{"location":"tsUtil/#private","text":"valString: string Turns the given val into its appropriate string format to be included as part of the JSON output (for stringify() ). Argument Type Description val any Value to be turned into a string . wrap: string Wrap and return the given string with a double quote around it. Argument Type Description toWrap string String to be wrapped.","title":"private"}]}