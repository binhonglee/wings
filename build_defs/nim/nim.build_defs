def nimscript(name:str, main:str, deps:list=None, visibility:list=None):
    cmds = 'cp $SRCS $OUT'

    return build_rule(
        name = name,
        srcs = [main],
        outs = ['%s.nims' % name],
        cmd = cmds,
        deps = deps,
        binary = True,
        needs_transitive_deps = True,
        visibility = visibility,
    )

def nim_binary(name:str, main:str, srcs:list=[], out:str=None, test_only:bool=False, visibility:list=None, deps:list=[]):
    out = out or name

    cmd = ' && '.join([
        _home_path(),
        _nimble_path(),
        "$TOOL --verbosity:2 --NimblePath:$NIMBLE_PATH/pkgs -o:" + out + " c $PKG_DIR/" + main,
    ])

    return build_rule(
        name = name,
        srcs = srcs + [main],
        outs = [out],
        tools = [CONFIG.NIM_TOOL],
        cmd = cmd,
        deps = deps,
        requires = [CONFIG.NIM_TOOL],
        test_only = test_only,
        binary = True,
        visibility = visibility,
    )

def nimble_install(name:str, pkg_name:str=None, revision:str=None, test_only:bool=False, visibility:list=None, deps:list=[]):
    pkg_name = pkg_name or name
    revision = revision or "#head"
    pkg = pkg_name + "@" + revision

    cmd = ' && '.join([
        _home_path(),
        _nimble_path(),
        "$TOOL --accept --verbose --nimbleDir:$NIMBLE_PATH install " + pkg,
        "ln -s $NIMBLE_PATH/pkgs/" + pkg_name + "* ./",
    ])

    return build_rule(
        name = name,
        tools = [CONFIG.NIMBLE_TOOL],
        cmd = cmd,
        deps = deps,
        outs = [pkg_name + "-" + revision],
        requires = [CONFIG.NIMBLE_TOOL],
        test_only = test_only,
        visibility = visibility,
)

def _nimble_path():
    return "NIMBLE_PATH=$(pwd | awk -F'plz-out' '{print $1}')\"plz-out/.nimble\""

def _home_path():
    return "if [[ \"$OSTYPE\" == \"darwin\"* ]]; then HOME=\"/Users/$USER\"; elif [[ \"$OSTYPE\" == \"linux-gnu\"* ]]; then HOME=\"/home/$USER\"; fi",


CONFIG.setdefault('NIM_TOOL', 'nim')
CONFIG.setdefault('NIMBLE_TOOL', 'nimble')
