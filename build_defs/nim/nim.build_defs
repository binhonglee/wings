def nimscript(name:str, main:str, deps:list=None, visibility:list=None):
  cmds = 'cp $SRCS $OUT'

  return build_rule(
    name = name,
    srcs = [main],
    outs = ['%s.nims' % name],
    cmd = cmds,
    deps = deps,
    binary = True,
    needs_transitive_deps = True,
    visibility = visibility,
  )

def nim_run_script(
  name:str, main:str, outs:list=[], out_path:str=None,
  deps:list=None, visibility:list=None
):
  temp = "temp_script_" + main

  cmd = ' && '.join([
    _home_path(),
    _nimble_path(),
    "cp ./$PKG_DIR/" + main + " " + temp,
    "chmod +x " + temp,
    "./" + temp,
    "rm " + temp,
  ])

  if out_path is not None:
    for i in outs:
      cmd = ' && '.join([
        cmd,
        "cp " + i + " " + _top_level_dir() + out_path,
      ])

  return build_rule(
    name = name,
    srcs = [main],
    outs = outs,
    tools = [CONFIG.NIM_TOOL],
    cmd = cmd,
    deps = deps,
    requires = [CONFIG.NIM_TOOL],
    binary = False,
    visibility = visibility,
  )

def nim_doc(
  name:str, main:str, srcs:list=[], out:str="nimDocs", opts:list=[],
  index:bool=False, index_out:str="theindex.html", url:str=None,
  commit:str=None, devel:str=None, visibility:list=None, deps:list=[]
):
  compile_options = ' '.join(opts)

  if index:
    index_option = "--index:on"
  else:
    index_option = "--index:off"
    index_out = ""

  if url is not None:
    url = " --git.url:" + url
  if commit is not None:
    commit = " --git.commit:" + commit
  if devel is not None:
    devel = " --git.devel:" + devel

  cmd = ' && '.join([
    _home_path(),
    _nimble_path(),
    "$TOOL --verbosity:2 --NimblePath:$NIMBLE_PATH/pkgs doc --project " + index_option + " -o:" + out + url + commit + devel + " $PKG_DIR/" + main,
    "mkdir " + _top_level_dir() + out + " || echo 'Folder already exists.'",
    "cp -R " + out + "* " + _top_level_dir() + out,
  ])

  if index:
    cmd += ' && '.join([
      "",
      "$TOOL --verbosity:2 --NimblePath:$NIMBLE_PATH/pkgs buildIndex -o:" + index_out + " " + out,
      "cp -R " + index_out + " " + _top_level_dir() + out,
    ])

  return build_rule(
    name = name,
    srcs = srcs + [main],
    outs = [out],
    tools = [CONFIG.NIM_TOOL],
    cmd = cmd,
    deps = deps,
    requires = [CONFIG.NIM_TOOL],
    visibility = visibility,
  )

def nim_binary(name:str, main:str, srcs:list=[], out:str=None, opts:list=[], test_only:bool=False, visibility:list=None, deps:list=[]):
  out = out or name

  compile_options = ' '.join(opts)

  cmd = ' && '.join([
    _home_path(),
    _nimble_path(),
    "$TOOL --verbosity:2 --NimblePath:$NIMBLE_PATH/pkgs -o:" + out + " " + compile_options + " c $PKG_DIR/" + main,
  ])

  return build_rule(
    name = name,
    srcs = srcs + [main],
    outs = [out],
    tools = [CONFIG.NIM_TOOL],
    cmd = cmd,
    deps = deps,
    requires = [CONFIG.NIM_TOOL],
    test_only = test_only,
    binary = True,
    visibility = visibility,
  )

def nimble_install(name:str, pkg_name:str=None, revision:str=None, test_only:bool=False, visibility:list=None, deps:list=[]):
  pkg_name = pkg_name or name
  revision = revision or "#head"
  pkg = pkg_name + "@" + revision

  cmd = ' && '.join([
    _home_path(),
    _nimble_path(),
    "$TOOL --accept --verbose --nimbleDir:$NIMBLE_PATH install " + pkg,
    "ln -s $NIMBLE_PATH/pkgs/" + pkg_name + "* ./",
  ])

  return build_rule(
    name = name,
    tools = [CONFIG.NIMBLE_TOOL],
    cmd = cmd,
    deps = deps,
    outs = [pkg_name + "-" + revision],
    requires = [CONFIG.NIMBLE_TOOL],
    test_only = test_only,
    visibility = visibility,
)

def _nimble_path():
  return "NIMBLE_PATH=$(pwd | awk -F'plz-out' '{print $1}')\"plz-out/.nimble\""

def _home_path():
  return "if [[ \"$OSTYPE\" == \"darwin\"* ]]; then HOME=\"/Users/$USER\"; elif [[ \"$OSTYPE\" == \"linux-gnu\"* ]]; then HOME=\"/home/$USER\"; fi",

def _go_to_top_level():
  return "cd " + _top_level_dir() + " || exit 1"

def _top_level_dir():
  return "$(pwd | awk -F'plz-out' '{print $1}')"

CONFIG.setdefault('NIM_TOOL', 'nim')
CONFIG.setdefault('NIMBLE_TOOL', 'nimble')
