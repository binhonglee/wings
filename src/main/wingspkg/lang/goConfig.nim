# DO NOT MANUALLY EDIT THIS FILE
#
# This file is automatically generated based on the config files located in `examples/input/template/`.

from stones/cases import Case
import tables
import ../lib/tconfig

const COMMENT: string = "//"
const FILENAME: Case = Case.Lower
const FILETYPE: string = "go"
const IMPLEMENT_FORMAT: string = "{#IMPLEMENT}"
const IMPORT_PATH_FORMAT: string = "{#1}:{#IMPORT}"
const IMPORT_PATH_TYPE: ImportPathType = ImportPathType.Absolute
const IMPORT_PATH_PREFIX: string = ""
const IMPORT_PATH_SEPARATOR: char = '/'
const IMPORT_PATH_LEVEL: int = 1
const PARSE_FORMAT: string = ""
const INTERFACE_SUPPORTED: bool = true
const PARAM_FORMAT: string = "{#PARAM_NAME} {#PARAM_TYPE}"
const PARAM_JOINER: string = ", "
const PRE_INDENT: bool = false
const INDENTATION_SPACING: string = "	"

const TEMPLATE_STRUCT: string = """
package {#1}
// #BEGIN_IMPORT

import (
	// #IMPORT2 {#IMPORT_1} "{#IMPORT_2}"
	// #IMPORT1 "{#IMPORT_1}"
)
// #END_IMPORT

// #BEGIN_VAR
// {#NAME_PASCAL} - {#COMMENT}
type {#NAME_PASCAL} struct {
	// #VAR {#VARNAME_PASCAL} {#SPACED} {#TYPE} {#SPACED} `json:"{#VARNAME_JSON}"`
}
// #END_VAR
// #BEGIN_FUNCTIONS

// #FUNCTIONS {#FUNCTIONS}
// #END_FUNCTIONS

// {#NAME_PASCAL}s - An array of {#NAME_PASCAL}
type {#NAME_PASCAL}s []{#NAME_PASCAL}

"""

const TEMPLATE_ENUM: string = """
package {#1}

type {#NAME} int

// #BEGIN_VAR
const (
	// #VAR {#VARNAME_PASCAL} = iota
)
// #END_VAR

"""

const TEMPLATE_INTERFACE: string = """
package {#1}
// #BEGIN_IMPORT

import (
	// #IMPORT2 {#IMPORT_1} "{#IMPORT_2}"
	// #IMPORT1 "{#IMPORT_1}"
)
// #END_IMPORT

// {#NAME_PASCAL} - {#COMMENT}
type {#NAME_PASCAL} interface {
// #BEGIN_FUNC
	// #FUNC {#FUNCNAME_PASCAL}({#PARAMS}) {#TYPE}
// #END_FUNC
}
// #BEGIN_FUNCTIONS

// #FUNCTIONS {#FUNCTIONS}
// #END_FUNCTIONS

"""

let TYPES: Table[string, TypeInterpreter] = {
  "dbl": initTypeInterpreter("dbl", "double", "", "", ""),
  "void": initTypeInterpreter("void", "", "", "", ""),
  "bool": initTypeInterpreter("bool", "bool", "", "", ""),
  "flt": initTypeInterpreter("flt", "float", "", "", ""),
  "date": initTypeInterpreter("date", "time.Time", "time", "", ""),
  "str": initTypeInterpreter("str", "string", "", "", ""),
  "!imported": initTypeInterpreter("!imported", "{#1}.{#TYPE_PASCAL}", "", "", ""),
  "int": initTypeInterpreter("int", "int", "", "", ""),
  "!unimported": initTypeInterpreter("!unimported", "{#TYPE_PASCAL}", "", "", ""),
}.toTable()

let CUSTOM_TYPES: Table[string, CustomTypeInterpreter] = {
  "Map<": interpretType(
    initTypeInterpreter("Map<{TYPE1},{TYPE2}>", "map[{TYPE1}]{TYPE2}", "", "", "")
  ),
  "[]": interpretType(
    initTypeInterpreter("[]{TYPE}", "[]{TYPE1}", "", "", "")
  ),
}.toTable()

let GO_CONFIG*: TConfig = initTConfig(
  cmt = COMMENT,
  ct = CUSTOM_TYPES,
  c = FILENAME,
  ft = FILETYPE,
  ifmt = IMPLEMENT_FORMAT,
  ipfmt = IMPORT_PATH_FORMAT,
  ipt = IMPORT_PATH_TYPE,
  pfx = IMPORT_PATH_PREFIX,
  sep = IMPORT_PATH_SEPARATOR,
  level = IMPORT_PATH_LEVEL,
  isp = INDENTATION_SPACING,
  pi = PRE_INDENT,
  isup = INTERFACE_SUPPORTED,
  prmFmt = PARAM_FORMAT,
  prmJnr = PARAM_JOINER,
  pfmt = PARSE_FORMAT,
  temp = {
    "struct": TEMPLATE_STRUCT,
    "enum": TEMPLATE_ENUM,
    "interface": TEMPLATE_INTERFACE,
  }.toTable(),
  ty = TYPES,
)
